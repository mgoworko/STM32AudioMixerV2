
10_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003784  08003784  00013784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  08003860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201c4  2**0
                  CONTENTS
  8 .bss          0000189c  200001c4  200001c4  000201c4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001a60  20001a60  000201c4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000172b9  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000033c4  00000000  00000000  000374ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000052b7  00000000  00000000  0003a871  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0003fb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005687  00000000  00000000  00040eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000033c0  00000000  00000000  0004653f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000498ff  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001ad8  00000000  00000000  0004997c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800376c 	.word	0x0800376c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	0800376c 	.word	0x0800376c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f8a8 	bl	80006ec <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000118 	.word	0x20000118
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f002 f9ad 	bl	800294e <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200001f4 	.word	0x200001f4
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200001f4 	.word	0x200001f4

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfaf      	iteee	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
 80006b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	bfa5      	ittet	ge
 80006bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006d4:	0942      	lsrs	r2, r0, #5
 80006d6:	2301      	movs	r3, #1
 80006d8:	f000 001f 	and.w	r0, r0, #31
 80006dc:	fa03 f000 	lsl.w	r0, r3, r0
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <HAL_NVIC_EnableIRQ+0x14>)
 80006e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100

080006ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	3801      	subs	r0, #1
 80006ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f2:	d20a      	bcs.n	800070a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	21f0      	movs	r1, #240	; 0xf0
 80006fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e010 	.word	0xe000e010
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800071a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800071c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800071e:	bf0c      	ite	eq
 8000720:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000724:	f022 0204 	bicne.w	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4770      	bx	lr
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000730:	4770      	bx	lr

08000732 <HAL_SYSTICK_IRQHandler>:
{
 8000732:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000734:	f7ff fffc 	bl	8000730 <HAL_SYSTICK_Callback>
 8000738:	bd08      	pop	{r3, pc}
	...

0800073c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000740:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008f4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000748:	4a68      	ldr	r2, [pc, #416]	; (80008ec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008f8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000750:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000752:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000758:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000760:	45b6      	cmp	lr, r6
 8000762:	f040 80ae 	bne.w	80008c2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000766:	684c      	ldr	r4, [r1, #4]
 8000768:	f024 0710 	bic.w	r7, r4, #16
 800076c:	2f02      	cmp	r7, #2
 800076e:	d116      	bne.n	800079e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000770:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000774:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000778:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800077c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000780:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000784:	f04f 0c0f 	mov.w	ip, #15
 8000788:	fa0c fc0b 	lsl.w	ip, ip, fp
 800078c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000790:	690d      	ldr	r5, [r1, #16]
 8000792:	fa05 f50b 	lsl.w	r5, r5, fp
 8000796:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800079a:	f8ca 5020 	str.w	r5, [sl, #32]
 800079e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007a4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a8:	fa05 f50a 	lsl.w	r5, r5, sl
 80007ac:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ba:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007bc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007c2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	d811      	bhi.n	80007ec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ce:	68cf      	ldr	r7, [r1, #12]
 80007d0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007d4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007dc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007e4:	409f      	lsls	r7, r3
 80007e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007f0:	688f      	ldr	r7, [r1, #8]
 80007f2:	fa07 f70a 	lsl.w	r7, r7, sl
 80007f6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fa:	00e5      	lsls	r5, r4, #3
 80007fc:	d561      	bpl.n	80008c2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	f04f 0b00 	mov.w	fp, #0
 8000802:	f8cd b00c 	str.w	fp, [sp, #12]
 8000806:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080a:	4d39      	ldr	r5, [pc, #228]	; (80008f0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000810:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000814:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000818:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800081c:	9703      	str	r7, [sp, #12]
 800081e:	9f03      	ldr	r7, [sp, #12]
 8000820:	f023 0703 	bic.w	r7, r3, #3
 8000824:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000828:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000830:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000834:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000838:	f04f 0e0f 	mov.w	lr, #15
 800083c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000840:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000842:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000846:	d043      	beq.n	80008d0 <HAL_GPIO_Init+0x194>
 8000848:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084c:	42a8      	cmp	r0, r5
 800084e:	d041      	beq.n	80008d4 <HAL_GPIO_Init+0x198>
 8000850:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000854:	42a8      	cmp	r0, r5
 8000856:	d03f      	beq.n	80008d8 <HAL_GPIO_Init+0x19c>
 8000858:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085c:	42a8      	cmp	r0, r5
 800085e:	d03d      	beq.n	80008dc <HAL_GPIO_Init+0x1a0>
 8000860:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000864:	42a8      	cmp	r0, r5
 8000866:	d03b      	beq.n	80008e0 <HAL_GPIO_Init+0x1a4>
 8000868:	4548      	cmp	r0, r9
 800086a:	d03b      	beq.n	80008e4 <HAL_GPIO_Init+0x1a8>
 800086c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000870:	42a8      	cmp	r0, r5
 8000872:	d039      	beq.n	80008e8 <HAL_GPIO_Init+0x1ac>
 8000874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000878:	42a8      	cmp	r0, r5
 800087a:	bf14      	ite	ne
 800087c:	2508      	movne	r5, #8
 800087e:	2507      	moveq	r5, #7
 8000880:	fa05 f50c 	lsl.w	r5, r5, ip
 8000884:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000888:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800088a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800088c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800088e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000892:	bf0c      	ite	eq
 8000894:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000896:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000898:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800089a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf0c      	ite	eq
 80008a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008a6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008aa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008ae:	bf0c      	ite	eq
 80008b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008b4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008b6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008b8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008ba:	bf54      	ite	pl
 80008bc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008be:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008c0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c2:	3301      	adds	r3, #1
 80008c4:	2b10      	cmp	r3, #16
 80008c6:	f47f af44 	bne.w	8000752 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008ca:	b005      	add	sp, #20
 80008cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d0:	465d      	mov	r5, fp
 80008d2:	e7d5      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008d4:	2501      	movs	r5, #1
 80008d6:	e7d3      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008d8:	2502      	movs	r5, #2
 80008da:	e7d1      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008dc:	2503      	movs	r5, #3
 80008de:	e7cf      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008e0:	2504      	movs	r5, #4
 80008e2:	e7cd      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008e4:	2505      	movs	r5, #5
 80008e6:	e7cb      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008e8:	2506      	movs	r5, #6
 80008ea:	e7c9      	b.n	8000880 <HAL_GPIO_Init+0x144>
 80008ec:	40013c00 	.word	0x40013c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40021400 	.word	0x40021400

080008fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008fc:	6903      	ldr	r3, [r0, #16]
 80008fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000900:	bf14      	ite	ne
 8000902:	2001      	movne	r0, #1
 8000904:	2000      	moveq	r0, #0
 8000906:	4770      	bx	lr

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
 800090e:	0409      	lsls	r1, r1, #16
 8000910:	e7fb      	b.n	800090a <HAL_GPIO_WritePin+0x2>

08000912 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000912:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000914:	4606      	mov	r6, r0
{ 
 8000916:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000918:	2800      	cmp	r0, #0
 800091a:	d064      	beq.n	80009e6 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800091c:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800091e:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000920:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000924:	f002 f8ea 	bl	8002afc <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000928:	f854 0b10 	ldr.w	r0, [r4], #16
 800092c:	f000 fed4 	bl	80016d8 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000932:	466d      	mov	r5, sp
 8000934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800093e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000942:	1d37      	adds	r7, r6, #4
 8000944:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000948:	6830      	ldr	r0, [r6, #0]
 800094a:	f000 fe85 	bl	8001658 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800094e:	2100      	movs	r1, #0
 8000950:	6830      	ldr	r0, [r6, #0]
 8000952:	f000 fec7 	bl	80016e4 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000956:	2100      	movs	r1, #0
 8000958:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800095a:	4632      	mov	r2, r6
 800095c:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000960:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000962:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000964:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000968:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 800096a:	3101      	adds	r1, #1
 800096c:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 800096e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000972:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8000976:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000978:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 800097a:	64d0      	str	r0, [r2, #76]	; 0x4c
 800097c:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8000980:	d1f0      	bne.n	8000964 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000982:	2200      	movs	r2, #0
 8000984:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8000988:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 800098a:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 800098e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000992:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000994:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8000998:	3201      	adds	r2, #1
 800099a:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 800099c:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009a0:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80009a4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80009a8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80009ac:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 80009b0:	6041      	str	r1, [r0, #4]
 80009b2:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80009b6:	d1e8      	bne.n	800098a <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80009b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ba:	466d      	mov	r5, sp
 80009bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80009ca:	4670      	mov	r0, lr
 80009cc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80009d0:	f000 fea0 	bl	8001714 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80009d4:	2301      	movs	r3, #1
 80009d6:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80009da:	6830      	ldr	r0, [r6, #0]
 80009dc:	f001 f9bd 	bl	8001d5a <USB_DevDisconnect>
 return HAL_OK;
 80009e0:	2000      	movs	r0, #0
}
 80009e2:	b00b      	add	sp, #44	; 0x2c
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
 80009e8:	e7fb      	b.n	80009e2 <HAL_PCD_Init+0xd0>

080009ea <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80009ea:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80009ee:	2b01      	cmp	r3, #1
{ 
 80009f0:	b510      	push	{r4, lr}
 80009f2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80009f4:	d00c      	beq.n	8000a10 <HAL_PCD_Start+0x26>
 80009f6:	2301      	movs	r3, #1
 80009f8:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80009fc:	6800      	ldr	r0, [r0, #0]
 80009fe:	f001 f9a0 	bl	8001d42 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a02:	6820      	ldr	r0, [r4, #0]
 8000a04:	f000 fe62 	bl	80016cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000a0e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000a10:	2002      	movs	r0, #2
}
 8000a12:	bd10      	pop	{r4, pc}

08000a14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a18:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000a1c:	b087      	sub	sp, #28
 8000a1e:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000a20:	4648      	mov	r0, r9
 8000a22:	f001 f9d4 	bl	8001dce <USB_GetMode>
 8000a26:	9002      	str	r0, [sp, #8]
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	f040 812e 	bne.w	8000c8a <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000a2e:	6820      	ldr	r0, [r4, #0]
 8000a30:	f001 f99f 	bl	8001d72 <USB_ReadInterrupts>
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f000 8128 	beq.w	8000c8a <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000a3a:	6820      	ldr	r0, [r4, #0]
 8000a3c:	f001 f999 	bl	8001d72 <USB_ReadInterrupts>
 8000a40:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a42:	bf48      	it	mi
 8000a44:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a46:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a48:	bf42      	ittt	mi
 8000a4a:	6953      	ldrmi	r3, [r2, #20]
 8000a4c:	f003 0302 	andmi.w	r3, r3, #2
 8000a50:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a52:	f001 f98e 	bl	8001d72 <USB_ReadInterrupts>
 8000a56:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000a5a:	d00a      	beq.n	8000a72 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a5c:	6820      	ldr	r0, [r4, #0]
 8000a5e:	f001 f98c 	bl	8001d7a <USB_ReadDevAllOutEpInterrupt>
 8000a62:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8000a66:	4607      	mov	r7, r0
 8000a68:	46a2      	mov	sl, r4
      epnum = 0U;
 8000a6a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a6c:	2f00      	cmp	r7, #0
 8000a6e:	f040 810f 	bne.w	8000c90 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000a72:	6820      	ldr	r0, [r4, #0]
 8000a74:	f001 f97d 	bl	8001d72 <USB_ReadInterrupts>
 8000a78:	0341      	lsls	r1, r0, #13
 8000a7a:	d50b      	bpl.n	8000a94 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000a7c:	6820      	ldr	r0, [r4, #0]
 8000a7e:	f001 f984 	bl	8001d8a <USB_ReadDevAllInEpInterrupt>
 8000a82:	4626      	mov	r6, r4
 8000a84:	9003      	str	r0, [sp, #12]
 8000a86:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8000a8a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a8c:	9b03      	ldr	r3, [sp, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 813f 	bne.w	8000d12 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	f001 f96c 	bl	8001d72 <USB_ReadInterrupts>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	da0d      	bge.n	8000aba <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a9e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8000aa2:	f023 0301 	bic.w	r3, r3, #1
 8000aa6:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f002 f89c 	bl	8002be8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000ab0:	6822      	ldr	r2, [r4, #0]
 8000ab2:	6953      	ldr	r3, [r2, #20]
 8000ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ab8:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000aba:	6820      	ldr	r0, [r4, #0]
 8000abc:	f001 f959 	bl	8001d72 <USB_ReadInterrupts>
 8000ac0:	0506      	lsls	r6, r0, #20
 8000ac2:	d50b      	bpl.n	8000adc <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000ac4:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000ac8:	07d8      	lsls	r0, r3, #31
 8000aca:	d502      	bpl.n	8000ad2 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000acc:	4620      	mov	r0, r4
 8000ace:	f002 f873 	bl	8002bb8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000ad2:	6822      	ldr	r2, [r4, #0]
 8000ad4:	6953      	ldr	r3, [r2, #20]
 8000ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ada:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	f001 f948 	bl	8001d72 <USB_ReadInterrupts>
 8000ae2:	04c1      	lsls	r1, r0, #19
 8000ae4:	d537      	bpl.n	8000b56 <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000ae6:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000aea:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000aec:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000aee:	f023 0301 	bic.w	r3, r3, #1
 8000af2:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000af4:	2110      	movs	r1, #16
 8000af6:	f000 fea9 	bl	800184c <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000afa:	6861      	ldr	r1, [r4, #4]
 8000afc:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000b00:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b02:	9802      	ldr	r0, [sp, #8]
 8000b04:	4288      	cmp	r0, r1
 8000b06:	f040 8192 	bne.w	8000e2e <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000b10:	69f3      	ldr	r3, [r6, #28]
 8000b12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000b16:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 818f 	beq.w	8000e3e <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000b20:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000b24:	f043 030b 	orr.w	r3, r3, #11
 8000b28:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000b2c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000b2e:	f043 030b 	orr.w	r3, r3, #11
 8000b32:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b34:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b38:	7c21      	ldrb	r1, [r4, #16]
 8000b3a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000b40:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b44:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000b48:	f001 f960 	bl	8001e0c <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	6953      	ldr	r3, [r2, #20]
 8000b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b54:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000b56:	6820      	ldr	r0, [r4, #0]
 8000b58:	f001 f90b 	bl	8001d72 <USB_ReadInterrupts>
 8000b5c:	0482      	lsls	r2, r0, #18
 8000b5e:	d51d      	bpl.n	8000b9c <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	f001 f938 	bl	8001dd6 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000b66:	6820      	ldr	r0, [r4, #0]
 8000b68:	68c3      	ldr	r3, [r0, #12]
 8000b6a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b6e:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000b70:	f000 fe95 	bl	800189e <USB_GetDevSpeed>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	f040 816b 	bne.w	8000e50 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b7a:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000b7c:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b82:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b84:	68d3      	ldr	r3, [r2, #12]
 8000b86:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000b8a:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f002 f802 	bl	8002b96 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	6953      	ldr	r3, [r2, #20]
 8000b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9a:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b9c:	6820      	ldr	r0, [r4, #0]
 8000b9e:	f001 f8e8 	bl	8001d72 <USB_ReadInterrupts>
 8000ba2:	06c3      	lsls	r3, r0, #27
 8000ba4:	d52b      	bpl.n	8000bfe <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	6993      	ldr	r3, [r2, #24]
 8000baa:	f023 0310 	bic.w	r3, r3, #16
 8000bae:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000bb0:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000bb4:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000bb8:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000bba:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000bbe:	f040 81a8 	bne.w	8000f12 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000bc2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000bc6:	421e      	tst	r6, r3
 8000bc8:	d014      	beq.n	8000bf4 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000bca:	271c      	movs	r7, #28
 8000bcc:	fb07 4708 	mla	r7, r7, r8, r4
 8000bd0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000bda:	4648      	mov	r0, r9
 8000bdc:	f001 f85b 	bl	8001c96 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000be0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000be4:	4433      	add	r3, r6
 8000be6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bee:	441e      	add	r6, r3
 8000bf0:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	6993      	ldr	r3, [r2, #24]
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000bfe:	6820      	ldr	r0, [r4, #0]
 8000c00:	f001 f8b7 	bl	8001d72 <USB_ReadInterrupts>
 8000c04:	0707      	lsls	r7, r0, #28
 8000c06:	d507      	bpl.n	8000c18 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f001 ffc0 	bl	8002b8e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000c0e:	6822      	ldr	r2, [r4, #0]
 8000c10:	6953      	ldr	r3, [r2, #20]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	f001 f8aa 	bl	8001d72 <USB_ReadInterrupts>
 8000c1e:	02c6      	lsls	r6, r0, #11
 8000c20:	d508      	bpl.n	8000c34 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000c22:	b2e9      	uxtb	r1, r5
 8000c24:	4620      	mov	r0, r4
 8000c26:	f001 ffe7 	bl	8002bf8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c2a:	6822      	ldr	r2, [r4, #0]
 8000c2c:	6953      	ldr	r3, [r2, #20]
 8000c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c32:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c34:	6820      	ldr	r0, [r4, #0]
 8000c36:	f001 f89c 	bl	8001d72 <USB_ReadInterrupts>
 8000c3a:	0280      	lsls	r0, r0, #10
 8000c3c:	d508      	bpl.n	8000c50 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000c3e:	b2e9      	uxtb	r1, r5
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 ffd5 	bl	8002bf0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	6953      	ldr	r3, [r2, #20]
 8000c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c50:	6820      	ldr	r0, [r4, #0]
 8000c52:	f001 f88e 	bl	8001d72 <USB_ReadInterrupts>
 8000c56:	0041      	lsls	r1, r0, #1
 8000c58:	d507      	bpl.n	8000c6a <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f001 ffd0 	bl	8002c00 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c60:	6822      	ldr	r2, [r4, #0]
 8000c62:	6953      	ldr	r3, [r2, #20]
 8000c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c68:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c6a:	6820      	ldr	r0, [r4, #0]
 8000c6c:	f001 f881 	bl	8001d72 <USB_ReadInterrupts>
 8000c70:	0742      	lsls	r2, r0, #29
 8000c72:	d50a      	bpl.n	8000c8a <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c78:	076b      	lsls	r3, r5, #29
 8000c7a:	d502      	bpl.n	8000c82 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f001 ffc3 	bl	8002c08 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4315      	orrs	r5, r2
 8000c88:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000c8a:	b007      	add	sp, #28
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000c90:	07f8      	lsls	r0, r7, #31
 8000c92:	d538      	bpl.n	8000d06 <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c94:	fa5f fb85 	uxtb.w	fp, r5
 8000c98:	4659      	mov	r1, fp
 8000c9a:	6820      	ldr	r0, [r4, #0]
 8000c9c:	f001 f87d 	bl	8001d9a <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ca0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000ca4:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ca6:	d021      	beq.n	8000cec <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000ca8:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000caa:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000cac:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000cae:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000cb0:	d10c      	bne.n	8000ccc <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000cb2:	6931      	ldr	r1, [r6, #16]
 8000cb4:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000cb8:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000cbc:	1a41      	subs	r1, r0, r1
 8000cbe:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000cc2:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000cc6:	4408      	add	r0, r1
 8000cc8:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000ccc:	4659      	mov	r1, fp
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f001 ff4c 	bl	8002b6c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000cd4:	6921      	ldr	r1, [r4, #16]
 8000cd6:	2901      	cmp	r1, #1
 8000cd8:	d108      	bne.n	8000cec <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000cda:	b93d      	cbnz	r5, 8000cec <HAL_PCD_IRQHandler+0x2d8>
 8000cdc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000ce0:	b922      	cbnz	r2, 8000cec <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ce2:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000ce6:	6820      	ldr	r0, [r4, #0]
 8000ce8:	f001 f890 	bl	8001e0c <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000cec:	f018 0f08 	tst.w	r8, #8
 8000cf0:	d004      	beq.n	8000cfc <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f001 ff34 	bl	8002b60 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000cfc:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000d00:	bf1c      	itt	ne
 8000d02:	2310      	movne	r3, #16
 8000d04:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000d06:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000d08:	087f      	lsrs	r7, r7, #1
 8000d0a:	3620      	adds	r6, #32
 8000d0c:	f10a 0a1c 	add.w	sl, sl, #28
 8000d10:	e6ac      	b.n	8000a6c <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000d12:	9b03      	ldr	r3, [sp, #12]
 8000d14:	07da      	lsls	r2, r3, #31
 8000d16:	d558      	bpl.n	8000dca <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d18:	fa5f fb85 	uxtb.w	fp, r5
 8000d1c:	4659      	mov	r1, fp
 8000d1e:	6820      	ldr	r0, [r4, #0]
 8000d20:	f001 f845 	bl	8001dae <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d24:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d26:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d28:	d520      	bpl.n	8000d6c <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d2a:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000d2e:	2101      	movs	r1, #1
 8000d30:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d32:	ea23 0301 	bic.w	r3, r3, r1
 8000d36:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000d40:	6923      	ldr	r3, [r4, #16]
 8000d42:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000d44:	bf01      	itttt	eq
 8000d46:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000d48:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000d4a:	189b      	addeq	r3, r3, r2
 8000d4c:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000d4e:	4659      	mov	r1, fp
 8000d50:	4620      	mov	r0, r4
 8000d52:	f001 ff14 	bl	8002b7e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000d56:	6921      	ldr	r1, [r4, #16]
 8000d58:	2901      	cmp	r1, #1
 8000d5a:	d107      	bne.n	8000d6c <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000d5c:	b935      	cbnz	r5, 8000d6c <HAL_PCD_IRQHandler+0x358>
 8000d5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d60:	b923      	cbnz	r3, 8000d6c <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d62:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	f001 f850 	bl	8001e0c <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d6c:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d6e:	bf44      	itt	mi
 8000d70:	2308      	movmi	r3, #8
 8000d72:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d76:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d78:	bf44      	itt	mi
 8000d7a:	2310      	movmi	r3, #16
 8000d7c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d80:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d82:	bf44      	itt	mi
 8000d84:	2340      	movmi	r3, #64	; 0x40
 8000d86:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d8a:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000d8c:	bf44      	itt	mi
 8000d8e:	2302      	movmi	r3, #2
 8000d90:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d94:	063f      	lsls	r7, r7, #24
 8000d96:	d518      	bpl.n	8000dca <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000d9c:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000d9e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000da0:	1aff      	subs	r7, r7, r3
 8000da2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000da4:	429f      	cmp	r7, r3
 8000da6:	bf28      	it	cs
 8000da8:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000daa:	9b04      	ldr	r3, [sp, #16]
 8000dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000db0:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000db4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000db8:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000dbc:	9305      	str	r3, [sp, #20]
 8000dbe:	9b05      	ldr	r3, [sp, #20]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4553      	cmp	r3, sl
 8000dc6:	d808      	bhi.n	8000dda <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000dc8:	b32f      	cbz	r7, 8000e16 <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000dca:	9b03      	ldr	r3, [sp, #12]
 8000dcc:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000dce:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000dd0:	9303      	str	r3, [sp, #12]
 8000dd2:	361c      	adds	r6, #28
 8000dd4:	f108 0820 	add.w	r8, r8, #32
 8000dd8:	e658      	b.n	8000a8c <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000dda:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000ddc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d9f2      	bls.n	8000dc8 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_PCD_IRQHandler+0x3b4>
 8000de6:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000de8:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	429f      	cmp	r7, r3
 8000dee:	bf28      	it	cs
 8000df0:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000df2:	7c23      	ldrb	r3, [r4, #16]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	465a      	mov	r2, fp
 8000df8:	b2bb      	uxth	r3, r7
 8000dfa:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000dfc:	f000 ff37 	bl	8001c6e <USB_WritePacket>
    ep->xfer_buff  += len;
 8000e00:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000e02:	443b      	add	r3, r7
 8000e04:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000e06:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000e08:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000e0c:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000e0e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000e12:	6533      	str	r3, [r6, #80]	; 0x50
 8000e14:	e7d3      	b.n	8000dbe <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e16:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000e18:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e1a:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000e1e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000e22:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e24:	ea23 0302 	bic.w	r3, r3, r2
 8000e28:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000e2c:	e7cd      	b.n	8000dca <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2e:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000e30:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e32:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000e34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e38:	9002      	str	r0, [sp, #8]
 8000e3a:	3320      	adds	r3, #32
 8000e3c:	e661      	b.n	8000b02 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000e3e:	6973      	ldr	r3, [r6, #20]
 8000e40:	f043 030b 	orr.w	r3, r3, #11
 8000e44:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000e46:	6933      	ldr	r3, [r6, #16]
 8000e48:	f043 030b 	orr.w	r3, r3, #11
 8000e4c:	6133      	str	r3, [r6, #16]
 8000e4e:	e671      	b.n	8000b34 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000e50:	2303      	movs	r3, #3
 8000e52:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000e54:	2340      	movs	r3, #64	; 0x40
 8000e56:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000e58:	f000 fbf8 	bl	800164c <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <HAL_PCD_IRQHandler+0x51c>)
 8000e5e:	4a35      	ldr	r2, [pc, #212]	; (8000f34 <HAL_PCD_IRQHandler+0x520>)
 8000e60:	4403      	add	r3, r0
 8000e62:	4293      	cmp	r3, r2
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	d804      	bhi.n	8000e72 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	e68c      	b.n	8000b8c <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000e72:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_PCD_IRQHandler+0x524>)
 8000e74:	4931      	ldr	r1, [pc, #196]	; (8000f3c <HAL_PCD_IRQHandler+0x528>)
 8000e76:	4402      	add	r2, r0
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d803      	bhi.n	8000e84 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e82:	e7f4      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000e84:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000e88:	492d      	ldr	r1, [pc, #180]	; (8000f40 <HAL_PCD_IRQHandler+0x52c>)
 8000e8a:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e8e:	428a      	cmp	r2, r1
 8000e90:	d803      	bhi.n	8000e9a <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e98:	e7e9      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000e9a:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000e9e:	4929      	ldr	r1, [pc, #164]	; (8000f44 <HAL_PCD_IRQHandler+0x530>)
 8000ea0:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	d803      	bhi.n	8000eb0 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000eae:	e7de      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000eb0:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <HAL_PCD_IRQHandler+0x534>)
 8000eb2:	4926      	ldr	r1, [pc, #152]	; (8000f4c <HAL_PCD_IRQHandler+0x538>)
 8000eb4:	4402      	add	r2, r0
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	d803      	bhi.n	8000ec2 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000ec0:	e7d5      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000ec2:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <HAL_PCD_IRQHandler+0x53c>)
 8000ec4:	4923      	ldr	r1, [pc, #140]	; (8000f54 <HAL_PCD_IRQHandler+0x540>)
 8000ec6:	4402      	add	r2, r0
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	d803      	bhi.n	8000ed4 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000ed2:	e7cc      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000ed4:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <HAL_PCD_IRQHandler+0x544>)
 8000ed6:	4921      	ldr	r1, [pc, #132]	; (8000f5c <HAL_PCD_IRQHandler+0x548>)
 8000ed8:	4402      	add	r2, r0
 8000eda:	428a      	cmp	r2, r1
 8000edc:	d803      	bhi.n	8000ee6 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000ee4:	e7c3      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000ee6:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000eea:	491d      	ldr	r1, [pc, #116]	; (8000f60 <HAL_PCD_IRQHandler+0x54c>)
 8000eec:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000ef0:	428a      	cmp	r2, r1
 8000ef2:	d803      	bhi.n	8000efc <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000efa:	e7b8      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_PCD_IRQHandler+0x550>)
 8000efe:	491a      	ldr	r1, [pc, #104]	; (8000f68 <HAL_PCD_IRQHandler+0x554>)
 8000f00:	4402      	add	r2, r0
 8000f02:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	bf94      	ite	ls
 8000f08:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000f0c:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000f10:	e7ad      	b.n	8000e6e <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	f47f ae6e 	bne.w	8000bf4 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f18:	2208      	movs	r2, #8
 8000f1a:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000f1e:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f20:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f22:	f000 feb8 	bl	8001c96 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f26:	fb07 4708 	mla	r7, r7, r8, r4
 8000f2a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000f2e:	e65c      	b.n	8000bea <HAL_PCD_IRQHandler+0x1d6>
 8000f30:	ff275340 	.word	0xff275340
 8000f34:	000c34ff 	.word	0x000c34ff
 8000f38:	ff1b1e40 	.word	0xff1b1e40
 8000f3c:	000f423f 	.word	0x000f423f
 8000f40:	00124f7f 	.word	0x00124f7f
 8000f44:	0013d61f 	.word	0x0013d61f
 8000f48:	fee5b660 	.word	0xfee5b660
 8000f4c:	0016e35f 	.word	0x0016e35f
 8000f50:	feced300 	.word	0xfeced300
 8000f54:	001b773f 	.word	0x001b773f
 8000f58:	feb35bc0 	.word	0xfeb35bc0
 8000f5c:	002191bf 	.word	0x002191bf
 8000f60:	0038751f 	.word	0x0038751f
 8000f64:	fe5954e0 	.word	0xfe5954e0
 8000f68:	00419cdf 	.word	0x00419cdf

08000f6c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000f6c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000f70:	2b01      	cmp	r3, #1
{
 8000f72:	b510      	push	{r4, lr}
 8000f74:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000f76:	d009      	beq.n	8000f8c <HAL_PCD_SetAddress+0x20>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000f7e:	6800      	ldr	r0, [r0, #0]
 8000f80:	f000 fecf 	bl	8001d22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000f84:	2000      	movs	r0, #0
 8000f86:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f8c:	2002      	movs	r0, #2
}
 8000f8e:	bd10      	pop	{r4, pc}

08000f90 <HAL_PCD_EP_Open>:
{
 8000f90:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000f92:	b24e      	sxtb	r6, r1
 8000f94:	2e00      	cmp	r6, #0
{
 8000f96:	4604      	mov	r4, r0
 8000f98:	f04f 051c 	mov.w	r5, #28
 8000f9c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fa0:	bfb5      	itete	lt
 8000fa2:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fa6:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000faa:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fac:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000fb0:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000fb2:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000fb4:	bfb8      	it	lt
 8000fb6:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000fb8:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000fba:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fbc:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000fc0:	bf04      	itt	eq
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000fc6:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fc8:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000fca:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000fce:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d009      	beq.n	8000fe8 <HAL_PCD_EP_Open+0x58>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	f000 fc7a 	bl	80018d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000fe8:	2002      	movs	r0, #2
}
 8000fea:	bd70      	pop	{r4, r5, r6, pc}

08000fec <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000fec:	b24b      	sxtb	r3, r1
 8000fee:	2b00      	cmp	r3, #0
{  
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	f04f 021c 	mov.w	r2, #28
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ffc:	bfb5      	itete	lt
 8000ffe:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001002:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001006:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001008:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 800100c:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800100e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001010:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001012:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8001016:	2b01      	cmp	r3, #1
 8001018:	d009      	beq.n	800102e <HAL_PCD_EP_Close+0x42>
 800101a:	2301      	movs	r3, #1
 800101c:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001020:	6820      	ldr	r0, [r4, #0]
 8001022:	f000 fc96 	bl	8001952 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001026:	2000      	movs	r0, #0
 8001028:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800102c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800102e:	2002      	movs	r0, #2
}
 8001030:	bd10      	pop	{r4, pc}

08001032 <HAL_PCD_EP_Receive>:
{
 8001032:	b538      	push	{r3, r4, r5, lr}
 8001034:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001038:	241c      	movs	r4, #28
 800103a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800103e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001042:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001046:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 800104a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 800104c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001050:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001054:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001058:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 800105c:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800105e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001060:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001062:	bf08      	it	eq
 8001064:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8001068:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800106a:	b91d      	cbnz	r5, 8001074 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800106c:	f000 fd92 	bl	8001b94 <USB_EP0StartXfer>
}
 8001070:	2000      	movs	r0, #0
 8001072:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001074:	f000 fcc8 	bl	8001a08 <USB_EPStartXfer>
 8001078:	e7fa      	b.n	8001070 <HAL_PCD_EP_Receive+0x3e>

0800107a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800107a:	231c      	movs	r3, #28
 800107c:	f001 010f 	and.w	r1, r1, #15
 8001080:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001084:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8001088:	4770      	bx	lr

0800108a <HAL_PCD_EP_Transmit>:
{
 800108a:	b538      	push	{r3, r4, r5, lr}
 800108c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001090:	241c      	movs	r4, #28
 8001092:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001096:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800109a:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 800109c:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 80010a2:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 80010a4:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80010a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 80010aa:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 80010ae:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010b0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80010b2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80010b4:	bf08      	it	eq
 80010b6:	64a2      	streq	r2, [r4, #72]	; 0x48
 80010b8:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 80010ba:	b91d      	cbnz	r5, 80010c4 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010bc:	f000 fd6a 	bl	8001b94 <USB_EP0StartXfer>
}
 80010c0:	2000      	movs	r0, #0
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010c4:	f000 fca0 	bl	8001a08 <USB_EPStartXfer>
 80010c8:	e7fa      	b.n	80010c0 <HAL_PCD_EP_Transmit+0x36>

080010ca <HAL_PCD_EP_SetStall>:
{
 80010ca:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80010cc:	b24b      	sxtb	r3, r1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80010d4:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010d8:	bfb5      	itete	lt
 80010da:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80010de:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010e2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80010e4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80010e8:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010ea:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80010ec:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80010ee:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010f0:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010f2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010f4:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80010f8:	4293      	cmp	r3, r2
{
 80010fa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80010fc:	d00f      	beq.n	800111e <HAL_PCD_EP_SetStall+0x54>
 80010fe:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001102:	6800      	ldr	r0, [r0, #0]
 8001104:	f000 fdd5 	bl	8001cb2 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001108:	b92d      	cbnz	r5, 8001116 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800110a:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800110e:	7c21      	ldrb	r1, [r4, #16]
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	f000 fe7b 	bl	8001e0c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001116:	2000      	movs	r0, #0
 8001118:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800111c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800111e:	2002      	movs	r0, #2
}
 8001120:	bd38      	pop	{r3, r4, r5, pc}

08001122 <HAL_PCD_EP_ClrStall>:
{
 8001122:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001124:	b24b      	sxtb	r3, r1
 8001126:	2b00      	cmp	r3, #0
{
 8001128:	4605      	mov	r5, r0
 800112a:	f04f 021c 	mov.w	r2, #28
 800112e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001132:	bfb5      	itete	lt
 8001134:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001138:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800113c:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 800113e:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001142:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001144:	2400      	movs	r4, #0
 8001146:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001148:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800114a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800114c:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001150:	2b01      	cmp	r3, #1
 8001152:	d009      	beq.n	8001168 <HAL_PCD_EP_ClrStall+0x46>
 8001154:	2301      	movs	r3, #1
 8001156:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800115a:	6828      	ldr	r0, [r5, #0]
 800115c:	f000 fdc8 	bl	8001cf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001160:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001164:	4620      	mov	r0, r4
 8001166:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001168:	2002      	movs	r0, #2
}
 800116a:	bd38      	pop	{r3, r4, r5, pc}

0800116c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800116c:	6800      	ldr	r0, [r0, #0]
{
 800116e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001170:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001172:	b921      	cbnz	r1, 800117e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001178:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 800117a:	2000      	movs	r0, #0
 800117c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800117e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001180:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001182:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001186:	1e4e      	subs	r6, r1, #1
 8001188:	b2ec      	uxtb	r4, r5
 800118a:	42b4      	cmp	r4, r6
 800118c:	f105 0501 	add.w	r5, r5, #1
 8001190:	db06      	blt.n	80011a0 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001192:	313f      	adds	r1, #63	; 0x3f
 8001194:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800119c:	6043      	str	r3, [r0, #4]
 800119e:	e7ec      	b.n	800117a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80011a0:	3440      	adds	r4, #64	; 0x40
 80011a2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80011a6:	6864      	ldr	r4, [r4, #4]
 80011a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80011ac:	e7ec      	b.n	8001188 <HAL_PCDEx_SetTxFiFo+0x1c>

080011ae <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80011ae:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80011b0:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80011b2:	6259      	str	r1, [r3, #36]	; 0x24
}
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	4604      	mov	r4, r0
 80011be:	b918      	cbnz	r0, 80011c8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011c2:	b002      	add	sp, #8
 80011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c8:	6803      	ldr	r3, [r0, #0]
 80011ca:	07dd      	lsls	r5, r3, #31
 80011cc:	d410      	bmi.n	80011f0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	0798      	lsls	r0, r3, #30
 80011d2:	d458      	bmi.n	8001286 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	071a      	lsls	r2, r3, #28
 80011d8:	f100 809a 	bmi.w	8001310 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	075b      	lsls	r3, r3, #29
 80011e0:	f100 80b8 	bmi.w	8001354 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e4:	69a2      	ldr	r2, [r4, #24]
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	f040 8119 	bne.w	800141e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80011ec:	2000      	movs	r0, #0
 80011ee:	e7e8      	b.n	80011c2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f0:	4ba6      	ldr	r3, [pc, #664]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	f002 020c 	and.w	r2, r2, #12
 80011f8:	2a04      	cmp	r2, #4
 80011fa:	d007      	beq.n	800120c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2a08      	cmp	r2, #8
 8001204:	d10a      	bne.n	800121c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	0259      	lsls	r1, r3, #9
 800120a:	d507      	bpl.n	800121c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	039a      	lsls	r2, r3, #14
 8001212:	d5dc      	bpl.n	80011ce <HAL_RCC_OscConfig+0x16>
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1d9      	bne.n	80011ce <HAL_RCC_OscConfig+0x16>
 800121a:	e7d1      	b.n	80011c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	6863      	ldr	r3, [r4, #4]
 800121e:	4d9b      	ldr	r5, [pc, #620]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	d111      	bne.n	800124a <HAL_RCC_OscConfig+0x92>
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800122e:	f7ff f9f1 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4d96      	ldr	r5, [pc, #600]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001234:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	039b      	lsls	r3, r3, #14
 800123a:	d4c8      	bmi.n	80011ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff f9ea 	bl	8000614 <HAL_GetTick>
 8001240:	1b80      	subs	r0, r0, r6
 8001242:	2864      	cmp	r0, #100	; 0x64
 8001244:	d9f7      	bls.n	8001236 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001246:	2003      	movs	r0, #3
 8001248:	e7bb      	b.n	80011c2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124e:	d104      	bne.n	800125a <HAL_RCC_OscConfig+0xa2>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001256:	602b      	str	r3, [r5, #0]
 8001258:	e7e5      	b.n	8001226 <HAL_RCC_OscConfig+0x6e>
 800125a:	682a      	ldr	r2, [r5, #0]
 800125c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001260:	602a      	str	r2, [r5, #0]
 8001262:	682a      	ldr	r2, [r5, #0]
 8001264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001268:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1df      	bne.n	800122e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800126e:	f7ff f9d1 	bl	8000614 <HAL_GetTick>
 8001272:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	039f      	lsls	r7, r3, #14
 8001278:	d5a9      	bpl.n	80011ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7ff f9cb 	bl	8000614 <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	2864      	cmp	r0, #100	; 0x64
 8001282:	d9f7      	bls.n	8001274 <HAL_RCC_OscConfig+0xbc>
 8001284:	e7df      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b81      	ldr	r3, [pc, #516]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	f012 0f0c 	tst.w	r2, #12
 800128e:	d007      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	2a08      	cmp	r2, #8
 8001298:	d111      	bne.n	80012be <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	025e      	lsls	r6, r3, #9
 800129e:	d40e      	bmi.n	80012be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	0795      	lsls	r5, r2, #30
 80012a6:	d502      	bpl.n	80012ae <HAL_RCC_OscConfig+0xf6>
 80012a8:	68e2      	ldr	r2, [r4, #12]
 80012aa:	2a01      	cmp	r2, #1
 80012ac:	d188      	bne.n	80011c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	6921      	ldr	r1, [r4, #16]
 80012b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012bc:	e78a      	b.n	80011d4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012be:	68e2      	ldr	r2, [r4, #12]
 80012c0:	4b73      	ldr	r3, [pc, #460]	; (8001490 <HAL_RCC_OscConfig+0x2d8>)
 80012c2:	b1b2      	cbz	r2, 80012f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012c8:	f7ff f9a4 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	4d6f      	ldr	r5, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	0798      	lsls	r0, r3, #30
 80012d4:	d507      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	6922      	ldr	r2, [r4, #16]
 80012da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012e2:	602b      	str	r3, [r5, #0]
 80012e4:	e776      	b.n	80011d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff f995 	bl	8000614 <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2802      	cmp	r0, #2
 80012ee:	d9ef      	bls.n	80012d0 <HAL_RCC_OscConfig+0x118>
 80012f0:	e7a9      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80012f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f4:	f7ff f98e 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f8:	4d64      	ldr	r5, [pc, #400]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	0799      	lsls	r1, r3, #30
 8001300:	f57f af68 	bpl.w	80011d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff f986 	bl	8000614 <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	2802      	cmp	r0, #2
 800130c:	d9f6      	bls.n	80012fc <HAL_RCC_OscConfig+0x144>
 800130e:	e79a      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001310:	6962      	ldr	r2, [r4, #20]
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_RCC_OscConfig+0x2dc>)
 8001314:	b17a      	cbz	r2, 8001336 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800131a:	f7ff f97b 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	4d5b      	ldr	r5, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001320:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001324:	079f      	lsls	r7, r3, #30
 8001326:	f53f af59 	bmi.w	80011dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff f973 	bl	8000614 <HAL_GetTick>
 800132e:	1b80      	subs	r0, r0, r6
 8001330:	2802      	cmp	r0, #2
 8001332:	d9f6      	bls.n	8001322 <HAL_RCC_OscConfig+0x16a>
 8001334:	e787      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001336:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001338:	f7ff f96c 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4d53      	ldr	r5, [pc, #332]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800133e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001342:	0798      	lsls	r0, r3, #30
 8001344:	f57f af4a 	bpl.w	80011dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff f964 	bl	8000614 <HAL_GetTick>
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f6      	bls.n	8001340 <HAL_RCC_OscConfig+0x188>
 8001352:	e778      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800135c:	d128      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	9201      	str	r2, [sp, #4]
 8001360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001362:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001372:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4d48      	ldr	r5, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x2e0>)
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	05d9      	lsls	r1, r3, #23
 800137a:	d51b      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	68a3      	ldr	r3, [r4, #8]
 800137e:	4d43      	ldr	r5, [pc, #268]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 8001380:	2b01      	cmp	r3, #1
 8001382:	d127      	bne.n	80013d4 <HAL_RCC_OscConfig+0x21c>
 8001384:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800138c:	f7ff f942 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	4d3e      	ldr	r5, [pc, #248]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001392:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800139a:	079b      	lsls	r3, r3, #30
 800139c:	d539      	bpl.n	8001412 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800139e:	2e00      	cmp	r6, #0
 80013a0:	f43f af20 	beq.w	80011e4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a4:	4a39      	ldr	r2, [pc, #228]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 80013a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	e719      	b.n	80011e4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80013b0:	2600      	movs	r6, #0
 80013b2:	e7df      	b.n	8001374 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013bc:	f7ff f92a 	bl	8000614 <HAL_GetTick>
 80013c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	05da      	lsls	r2, r3, #23
 80013c6:	d4d9      	bmi.n	800137c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c8:	f7ff f924 	bl	8000614 <HAL_GetTick>
 80013cc:	1bc0      	subs	r0, r0, r7
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d9f7      	bls.n	80013c2 <HAL_RCC_OscConfig+0x20a>
 80013d2:	e738      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d104      	bne.n	80013e2 <HAL_RCC_OscConfig+0x22a>
 80013d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	672b      	str	r3, [r5, #112]	; 0x70
 80013e0:	e7d0      	b.n	8001384 <HAL_RCC_OscConfig+0x1cc>
 80013e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	672a      	str	r2, [r5, #112]	; 0x70
 80013ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013ec:	f022 0204 	bic.w	r2, r2, #4
 80013f0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1ca      	bne.n	800138c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80013f6:	f7ff f90d 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001402:	0798      	lsls	r0, r3, #30
 8001404:	d5cb      	bpl.n	800139e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff f905 	bl	8000614 <HAL_GetTick>
 800140a:	1bc0      	subs	r0, r0, r7
 800140c:	4540      	cmp	r0, r8
 800140e:	d9f7      	bls.n	8001400 <HAL_RCC_OscConfig+0x248>
 8001410:	e719      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff f8ff 	bl	8000614 <HAL_GetTick>
 8001416:	1bc0      	subs	r0, r0, r7
 8001418:	4540      	cmp	r0, r8
 800141a:	d9bd      	bls.n	8001398 <HAL_RCC_OscConfig+0x1e0>
 800141c:	e713      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141e:	4d1b      	ldr	r5, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
 8001420:	68ab      	ldr	r3, [r5, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	f43f aeca 	beq.w	80011c0 <HAL_RCC_OscConfig+0x8>
 800142c:	4e1b      	ldr	r6, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x2e4>)
 800142e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001432:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001434:	d134      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001436:	f7ff f8ed 	bl	8000614 <HAL_GetTick>
 800143a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	0199      	lsls	r1, r3, #6
 8001440:	d41e      	bmi.n	8001480 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001442:	6a22      	ldr	r2, [r4, #32]
 8001444:	69e3      	ldr	r3, [r4, #28]
 8001446:	4313      	orrs	r3, r2
 8001448:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800144a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800144e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001450:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001454:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001456:	4c0d      	ldr	r4, [pc, #52]	; (800148c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001458:	0852      	lsrs	r2, r2, #1
 800145a:	3a01      	subs	r2, #1
 800145c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001460:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001462:	2301      	movs	r3, #1
 8001464:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001466:	f7ff f8d5 	bl	8000614 <HAL_GetTick>
 800146a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	019a      	lsls	r2, r3, #6
 8001470:	f53f aebc 	bmi.w	80011ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff f8ce 	bl	8000614 <HAL_GetTick>
 8001478:	1b40      	subs	r0, r0, r5
 800147a:	2802      	cmp	r0, #2
 800147c:	d9f6      	bls.n	800146c <HAL_RCC_OscConfig+0x2b4>
 800147e:	e6e2      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff f8c8 	bl	8000614 <HAL_GetTick>
 8001484:	1bc0      	subs	r0, r0, r7
 8001486:	2802      	cmp	r0, #2
 8001488:	d9d8      	bls.n	800143c <HAL_RCC_OscConfig+0x284>
 800148a:	e6dc      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
 8001498:	40007000 	.word	0x40007000
 800149c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80014a0:	f7ff f8b8 	bl	8000614 <HAL_GetTick>
 80014a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	019b      	lsls	r3, r3, #6
 80014aa:	f57f ae9f 	bpl.w	80011ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff f8b1 	bl	8000614 <HAL_GetTick>
 80014b2:	1b00      	subs	r0, r0, r4
 80014b4:	2802      	cmp	r0, #2
 80014b6:	d9f6      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2ee>
 80014b8:	e6c5      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
 80014ba:	bf00      	nop

080014bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c0:	688b      	ldr	r3, [r1, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_GetSysClockFreq+0x16>
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d003      	beq.n	80014d6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014d2:	4810      	ldr	r0, [pc, #64]	; (8001514 <HAL_RCC_GetSysClockFreq+0x58>)
 80014d4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014da:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014dc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e0:	bf14      	ite	ne
 80014e2:	480c      	ldrne	r0, [pc, #48]	; (8001514 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	480a      	ldreq	r0, [pc, #40]	; (8001510 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014ea:	bf18      	it	ne
 80014ec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f2:	fba1 0100 	umull	r0, r1, r1, r0
 80014f6:	f7fe febb 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_RCC_GetSysClockFreq+0x50>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001506:	fbb0 f0f3 	udiv	r0, r0, r3
 800150a:	bd08      	pop	{r3, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	00f42400 	.word	0x00f42400
 8001514:	007a1200 	.word	0x007a1200

08001518 <HAL_RCC_ClockConfig>:
{
 8001518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800151e:	4604      	mov	r4, r0
 8001520:	b910      	cbnz	r0, 8001528 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b44      	ldr	r3, [pc, #272]	; (800163c <HAL_RCC_ClockConfig+0x124>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f002 020f 	and.w	r2, r2, #15
 8001530:	428a      	cmp	r2, r1
 8001532:	d328      	bcc.n	8001586 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	6821      	ldr	r1, [r4, #0]
 8001536:	078f      	lsls	r7, r1, #30
 8001538:	d42d      	bmi.n	8001596 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153a:	07c8      	lsls	r0, r1, #31
 800153c:	d440      	bmi.n	80015c0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_RCC_ClockConfig+0x124>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f002 020f 	and.w	r2, r2, #15
 8001546:	4295      	cmp	r5, r2
 8001548:	d366      	bcc.n	8001618 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154a:	6822      	ldr	r2, [r4, #0]
 800154c:	0751      	lsls	r1, r2, #29
 800154e:	d46c      	bmi.n	800162a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	0713      	lsls	r3, r2, #28
 8001552:	d507      	bpl.n	8001564 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001554:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <HAL_RCC_ClockConfig+0x128>)
 8001556:	6921      	ldr	r1, [r4, #16]
 8001558:	6893      	ldr	r3, [r2, #8]
 800155a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800155e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001562:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001564:	f7ff ffaa 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_RCC_ClockConfig+0x128>)
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <HAL_RCC_ClockConfig+0x12c>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	40d8      	lsrs	r0, r3
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_ClockConfig+0x130>)
 8001578:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff f800 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8001580:	2000      	movs	r0, #0
 8001582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	b2ca      	uxtb	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	4299      	cmp	r1, r3
 8001592:	d1c6      	bne.n	8001522 <HAL_RCC_ClockConfig+0xa>
 8001594:	e7ce      	b.n	8001534 <HAL_RCC_ClockConfig+0x1c>
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800159c:	bf1e      	ittt	ne
 800159e:	689a      	ldrne	r2, [r3, #8]
 80015a0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015a4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a8:	bf42      	ittt	mi
 80015aa:	689a      	ldrmi	r2, [r3, #8]
 80015ac:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015b0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68a0      	ldr	r0, [r4, #8]
 80015b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015ba:	4302      	orrs	r2, r0
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	e7bc      	b.n	800153a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c0:	6862      	ldr	r2, [r4, #4]
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_RCC_ClockConfig+0x128>)
 80015c4:	2a01      	cmp	r2, #1
 80015c6:	d11d      	bne.n	8001604 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	d0a8      	beq.n	8001522 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d0:	4e1b      	ldr	r6, [pc, #108]	; (8001640 <HAL_RCC_ClockConfig+0x128>)
 80015d2:	68b3      	ldr	r3, [r6, #8]
 80015d4:	f023 0303 	bic.w	r3, r3, #3
 80015d8:	4313      	orrs	r3, r2
 80015da:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015dc:	f7ff f81a 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80015e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	68b3      	ldr	r3, [r6, #8]
 80015e8:	6862      	ldr	r2, [r4, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015f2:	d0a4      	beq.n	800153e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff f80e 	bl	8000614 <HAL_GetTick>
 80015f8:	1bc0      	subs	r0, r0, r7
 80015fa:	4540      	cmp	r0, r8
 80015fc:	d9f3      	bls.n	80015e6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80015fe:	2003      	movs	r0, #3
}
 8001600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001604:	1e91      	subs	r1, r2, #2
 8001606:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	d802      	bhi.n	8001612 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001610:	e7dd      	b.n	80015ce <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	f013 0f02 	tst.w	r3, #2
 8001616:	e7da      	b.n	80015ce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001618:	b2ea      	uxtb	r2, r5
 800161a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	429d      	cmp	r5, r3
 8001624:	f47f af7d 	bne.w	8001522 <HAL_RCC_ClockConfig+0xa>
 8001628:	e78f      	b.n	800154a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162a:	4905      	ldr	r1, [pc, #20]	; (8001640 <HAL_RCC_ClockConfig+0x128>)
 800162c:	68e0      	ldr	r0, [r4, #12]
 800162e:	688b      	ldr	r3, [r1, #8]
 8001630:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001634:	4303      	orrs	r3, r0
 8001636:	608b      	str	r3, [r1, #8]
 8001638:	e78a      	b.n	8001550 <HAL_RCC_ClockConfig+0x38>
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00
 8001640:	40023800 	.word	0x40023800
 8001644:	080037a4 	.word	0x080037a4
 8001648:	20000118 	.word	0x20000118

0800164c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800164c:	4b01      	ldr	r3, [pc, #4]	; (8001654 <HAL_RCC_GetHCLKFreq+0x8>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000118 	.word	0x20000118

08001658 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001658:	b084      	sub	sp, #16
 800165a:	b538      	push	{r3, r4, r5, lr}
 800165c:	ad05      	add	r5, sp, #20
 800165e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001664:	2b01      	cmp	r3, #1
{
 8001666:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001668:	d126      	bne.n	80016b8 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800166a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800166c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001670:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001672:	68c3      	ldr	r3, [r0, #12]
 8001674:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800167c:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800167e:	68c3      	ldr	r3, [r0, #12]
 8001680:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001684:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8001686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001688:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800168a:	bf02      	ittt	eq
 800168c:	68c3      	ldreq	r3, [r0, #12]
 800168e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001692:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8001694:	f000 fbde 	bl	8001e54 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8001698:	9b08      	ldr	r3, [sp, #32]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800169e:	68a3      	ldr	r3, [r4, #8]
 80016a0:	f043 0306 	orr.w	r3, r3, #6
 80016a4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80016a6:	68a3      	ldr	r3, [r4, #8]
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80016ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016b2:	2000      	movs	r0, #0
 80016b4:	b004      	add	sp, #16
 80016b6:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80016b8:	68c3      	ldr	r3, [r0, #12]
 80016ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016be:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 80016c0:	f000 fbc8 	bl	8001e54 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80016c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80016ca:	e7e5      	b.n	8001698 <USB_CoreInit+0x40>

080016cc <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80016cc:	6883      	ldr	r3, [r0, #8]
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80016d4:	2000      	movs	r0, #0
 80016d6:	4770      	bx	lr

080016d8 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80016d8:	6883      	ldr	r3, [r0, #8]
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80016e0:	2000      	movs	r0, #0
 80016e2:	4770      	bx	lr

080016e4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80016e4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80016e6:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80016e8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80016ea:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80016ee:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80016f0:	d108      	bne.n	8001704 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80016f2:	68c3      	ldr	r3, [r0, #12]
 80016f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f8:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80016fa:	2032      	movs	r0, #50	; 0x32
 80016fc:	f7fe ff90 	bl	8000620 <HAL_Delay>
  
  return HAL_OK;
}
 8001700:	2000      	movs	r0, #0
 8001702:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8001704:	2900      	cmp	r1, #0
 8001706:	d1f8      	bne.n	80016fa <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001708:	68c3      	ldr	r3, [r0, #12]
 800170a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800170e:	60c3      	str	r3, [r0, #12]
 8001710:	e7f3      	b.n	80016fa <USB_SetCurrentMode+0x16>
	...

08001714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001714:	b084      	sub	sp, #16
 8001716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171a:	4604      	mov	r4, r0
 800171c:	a807      	add	r0, sp, #28
 800171e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001722:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001724:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001728:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 800172a:	b9a6      	cbnz	r6, 8001756 <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800172c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001730:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001738:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800173c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001742:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001744:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001748:	d15e      	bne.n	8001808 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800174a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800174c:	b939      	cbnz	r1, 800175e <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800174e:	4620      	mov	r0, r4
 8001750:	f000 f89e 	bl	8001890 <USB_SetDevSpeed>
 8001754:	e007      	b.n	8001766 <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001756:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800175a:	63a3      	str	r3, [r4, #56]	; 0x38
 800175c:	e7e9      	b.n	8001732 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800175e:	4619      	mov	r1, r3
 8001760:	4620      	mov	r0, r4
 8001762:	f000 f895 	bl	8001890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8001766:	2110      	movs	r1, #16
 8001768:	4620      	mov	r0, r4
 800176a:	f000 f86f 	bl	800184c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800176e:	4620      	mov	r0, r4
 8001770:	f000 f87e 	bl	8001870 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001774:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 800177a:	612b      	str	r3, [r5, #16]
 800177c:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 800177e:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001784:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001786:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800178a:	61eb      	str	r3, [r5, #28]
 800178c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001790:	4543      	cmp	r3, r8
 8001792:	d13b      	bne.n	800180c <USB_DevInit+0xf8>
 8001794:	2100      	movs	r1, #0
 8001796:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 800179a:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800179c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80017a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d13e      	bne.n	8001826 <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80017a8:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 80017aa:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80017ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b0:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80017b2:	d108      	bne.n	80017c6 <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <USB_DevInit+0x130>)
 80017b6:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80017b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	f043 0303 	orr.w	r3, r3, #3
 80017c2:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 80017c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80017ca:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80017ce:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80017d0:	b91f      	cbnz	r7, 80017da <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80017d2:	69a3      	ldr	r3, [r4, #24]
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80017da:	69a2      	ldr	r2, [r4, #24]
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <USB_DevInit+0x134>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80017e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80017e4:	b11b      	cbz	r3, 80017ee <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80017e6:	69a3      	ldr	r3, [r4, #24]
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80017ee:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80017f0:	bf01      	itttt	eq
 80017f2:	69a3      	ldreq	r3, [r4, #24]
 80017f4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80017f8:	f043 0304 	orreq.w	r3, r3, #4
 80017fc:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80017fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001802:	2000      	movs	r0, #0
 8001804:	b004      	add	sp, #16
 8001806:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001808:	2103      	movs	r1, #3
 800180a:	e7a0      	b.n	800174e <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800180c:	f8d2 c000 	ldr.w	ip, [r2]
 8001810:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001814:	bfb4      	ite	lt
 8001816:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001818:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800181a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800181c:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800181e:	f8c2 e008 	str.w	lr, [r2, #8]
 8001822:	3220      	adds	r2, #32
 8001824:	e7b4      	b.n	8001790 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001826:	f8d2 8000 	ldr.w	r8, [r2]
 800182a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800182e:	bfb4      	ite	lt
 8001830:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001834:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001836:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001838:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800183a:	f8c2 c008 	str.w	ip, [r2, #8]
 800183e:	3220      	adds	r2, #32
 8001840:	e7b0      	b.n	80017a4 <USB_DevInit+0x90>
 8001842:	bf00      	nop
 8001844:	00800100 	.word	0x00800100
 8001848:	803c3800 	.word	0x803c3800

0800184c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800184c:	0189      	lsls	r1, r1, #6
 800184e:	f041 0120 	orr.w	r1, r1, #32
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <USB_FlushTxFifo+0x20>)
 8001854:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001856:	3a01      	subs	r2, #1
 8001858:	d005      	beq.n	8001866 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800185a:	6903      	ldr	r3, [r0, #16]
 800185c:	f013 0320 	ands.w	r3, r3, #32
 8001860:	d1f9      	bne.n	8001856 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8001862:	4618      	mov	r0, r3
 8001864:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001866:	2003      	movs	r0, #3
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	00030d41 	.word	0x00030d41

08001870 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001870:	2310      	movs	r3, #16
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <USB_FlushRxFifo+0x1c>)
 8001874:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001876:	3a01      	subs	r2, #1
 8001878:	d005      	beq.n	8001886 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800187a:	6903      	ldr	r3, [r0, #16]
 800187c:	f013 0310 	ands.w	r3, r3, #16
 8001880:	d1f9      	bne.n	8001876 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001882:	4618      	mov	r0, r3
 8001884:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	00030d41 	.word	0x00030d41

08001890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8001890:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001894:	4319      	orrs	r1, r3
 8001896:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800189a:	2000      	movs	r0, #0
 800189c:	4770      	bx	lr

0800189e <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800189e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80018a2:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80018a6:	f010 0006 	ands.w	r0, r0, #6
 80018aa:	d012      	beq.n	80018d2 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f003 0306 	and.w	r3, r3, #6
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d00c      	beq.n	80018d0 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80018b6:	6893      	ldr	r3, [r2, #8]
 80018b8:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80018bc:	2b06      	cmp	r3, #6
 80018be:	d007      	beq.n	80018d0 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80018c0:	6893      	ldr	r3, [r2, #8]
 80018c2:	f003 0306 	and.w	r3, r3, #6
 80018c6:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 80018c8:	bf14      	ite	ne
 80018ca:	2000      	movne	r0, #0
 80018cc:	2002      	moveq	r0, #2
 80018ce:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 80018d0:	2003      	movs	r0, #3
  }
  
  return speed;
}
 80018d2:	4770      	bx	lr

080018d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80018d4:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80018d6:	784b      	ldrb	r3, [r1, #1]
 80018d8:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80018da:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80018de:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d11b      	bne.n	800191e <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80018e6:	40a3      	lsls	r3, r4
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80018ec:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80018f0:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80018f2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	0412      	lsls	r2, r2, #16
 80018fa:	d40e      	bmi.n	800191a <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80018fc:	688a      	ldr	r2, [r1, #8]
 80018fe:	78c8      	ldrb	r0, [r1, #3]
 8001900:	681d      	ldr	r5, [r3, #0]
 8001902:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001906:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800190a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190e:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8001912:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8001916:	4328      	orrs	r0, r5
 8001918:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 800191a:	2000      	movs	r0, #0
 800191c:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800191e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001922:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001924:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001928:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800192a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800192e:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001930:	6803      	ldr	r3, [r0, #0]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	d4f1      	bmi.n	800191a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001936:	688b      	ldr	r3, [r1, #8]
 8001938:	78c9      	ldrb	r1, [r1, #3]
 800193a:	6802      	ldr	r2, [r0, #0]
 800193c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001948:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800194c:	4313      	orrs	r3, r2
 800194e:	6003      	str	r3, [r0, #0]
 8001950:	e7e3      	b.n	800191a <USB_ActivateEndpoint+0x46>

08001952 <USB_DeactivateEndpoint>:
 8001952:	f000 b801 	b.w	8001958 <USB_DeactivateDedicatedEndpoint>
	...

08001958 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001958:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 800195a:	784b      	ldrb	r3, [r1, #1]
 800195c:	2b01      	cmp	r3, #1
{
 800195e:	460e      	mov	r6, r1
 8001960:	4605      	mov	r5, r0
 8001962:	7809      	ldrb	r1, [r1, #0]
 8001964:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8001968:	d126      	bne.n	80019b8 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800196a:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 800196e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001978:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800197a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8001980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8001988:	3a01      	subs	r2, #1
 800198a:	d101      	bne.n	8001990 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 800198c:	2003      	movs	r0, #3
 800198e:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8001990:	689c      	ldr	r4, [r3, #8]
 8001992:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001996:	d1f7      	bne.n	8001988 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8001998:	2110      	movs	r1, #16
 800199a:	4628      	mov	r0, r5
 800199c:	f7ff ff56 	bl	800184c <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 80019a0:	7831      	ldrb	r1, [r6, #0]
 80019a2:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80019a6:	2301      	movs	r3, #1
 80019a8:	408b      	lsls	r3, r1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	ea22 0303 	bic.w	r3, r2, r3
 80019b0:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 80019b4:	4620      	mov	r0, r4
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 80019b8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 80019bc:	fb13 2301 	smlabb	r3, r3, r1, r2
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c6:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80019c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019cc:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 80019d6:	3a01      	subs	r2, #1
 80019d8:	d0d8      	beq.n	800198c <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 80019da:	6898      	ldr	r0, [r3, #8]
 80019dc:	f010 0010 	ands.w	r0, r0, #16
 80019e0:	d1f9      	bne.n	80019d6 <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019e2:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80019ee:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80019f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f6:	408a      	lsls	r2, r1
 80019f8:	ea23 0302 	bic.w	r3, r3, r2
 80019fc:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	bf00      	nop
 8001a04:	00030d41 	.word	0x00030d41

08001a08 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001a0a:	784b      	ldrb	r3, [r1, #1]
 8001a0c:	780c      	ldrb	r4, [r1, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	694b      	ldr	r3, [r1, #20]
 8001a12:	d177      	bne.n	8001b04 <USB_EPStartXfer+0xfc>
 8001a14:	2620      	movs	r6, #32
 8001a16:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001a1a:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001a1e:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d138      	bne.n	8001a96 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001a24:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001a28:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001a2c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001a2e:	6926      	ldr	r6, [r4, #16]
 8001a30:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001a34:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001a36:	6926      	ldr	r6, [r4, #16]
 8001a38:	0cf6      	lsrs	r6, r6, #19
 8001a3a:	04f6      	lsls	r6, r6, #19
 8001a3c:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001a3e:	2a01      	cmp	r2, #1
 8001a40:	d150      	bne.n	8001ae4 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001a42:	780c      	ldrb	r4, [r1, #0]
 8001a44:	690e      	ldr	r6, [r1, #16]
 8001a46:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001a4a:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001a4c:	78ce      	ldrb	r6, [r1, #3]
 8001a4e:	2e01      	cmp	r6, #1
 8001a50:	d10f      	bne.n	8001a72 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001a52:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8001a56:	780f      	ldrb	r7, [r1, #0]
 8001a58:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001a5c:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001a60:	fb14 5407 	smlabb	r4, r4, r7, r5
 8001a64:	6827      	ldr	r7, [r4, #0]
 8001a66:	bf0c      	ite	eq
 8001a68:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001a6c:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8001a70:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001a72:	780f      	ldrb	r7, [r1, #0]
 8001a74:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8001a78:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001a7a:	682c      	ldr	r4, [r5, #0]
 8001a7c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001a80:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8001a82:	d105      	bne.n	8001a90 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8001a84:	9200      	str	r2, [sp, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	463a      	mov	r2, r7
 8001a8a:	68c9      	ldr	r1, [r1, #12]
 8001a8c:	f000 f8ef 	bl	8001c6e <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8001a90:	2000      	movs	r0, #0
 8001a92:	b003      	add	sp, #12
 8001a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001a96:	0cf6      	lsrs	r6, r6, #19
 8001a98:	04f6      	lsls	r6, r6, #19
 8001a9a:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001a9c:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001a9e:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001aa0:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001aa4:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001aa8:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001aaa:	19de      	adds	r6, r3, r7
 8001aac:	3e01      	subs	r6, #1
 8001aae:	fbb6 f7f7 	udiv	r7, r6, r7
 8001ab2:	4e37      	ldr	r6, [pc, #220]	; (8001b90 <USB_EPStartXfer+0x188>)
 8001ab4:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001ab8:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001abc:	ea46 060e 	orr.w	r6, r6, lr
 8001ac0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001ac2:	6927      	ldr	r7, [r4, #16]
 8001ac4:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001ac8:	433e      	orrs	r6, r7
 8001aca:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001acc:	78ce      	ldrb	r6, [r1, #3]
 8001ace:	2e01      	cmp	r6, #1
 8001ad0:	d15a      	bne.n	8001b88 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001ad2:	6926      	ldr	r6, [r4, #16]
 8001ad4:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001ad8:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001ada:	6926      	ldr	r6, [r4, #16]
 8001adc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001ae0:	6126      	str	r6, [r4, #16]
 8001ae2:	e7ac      	b.n	8001a3e <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001ae4:	78ce      	ldrb	r6, [r1, #3]
 8001ae6:	2e01      	cmp	r6, #1
 8001ae8:	d0b3      	beq.n	8001a52 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ae      	beq.n	8001a4c <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001aee:	f891 e000 	ldrb.w	lr, [r1]
 8001af2:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001af6:	2401      	movs	r4, #1
 8001af8:	fa04 f40e 	lsl.w	r4, r4, lr
 8001afc:	433c      	orrs	r4, r7
 8001afe:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001b02:	e7a3      	b.n	8001a4c <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001b04:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001b08:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001b0c:	6925      	ldr	r5, [r4, #16]
 8001b0e:	0ced      	lsrs	r5, r5, #19
 8001b10:	04ed      	lsls	r5, r5, #19
 8001b12:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001b14:	6925      	ldr	r5, [r4, #16]
 8001b16:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001b1a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001b1e:	6125      	str	r5, [r4, #16]
 8001b20:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001b22:	b9fb      	cbnz	r3, 8001b64 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001b2a:	431d      	orrs	r5, r3
 8001b2c:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001b2e:	6923      	ldr	r3, [r4, #16]
 8001b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b34:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001b36:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001b38:	bf04      	itt	eq
 8001b3a:	68cb      	ldreq	r3, [r1, #12]
 8001b3c:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001b3e:	78cb      	ldrb	r3, [r1, #3]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10a      	bne.n	8001b5a <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001b44:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001b48:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	bf0c      	ite	eq
 8001b50:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001b54:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001b60:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001b62:	e795      	b.n	8001a90 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001b64:	4e0a      	ldr	r6, [pc, #40]	; (8001b90 <USB_EPStartXfer+0x188>)
 8001b66:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001b68:	442b      	add	r3, r5
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001b70:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001b74:	433e      	orrs	r6, r7
 8001b76:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	6926      	ldr	r6, [r4, #16]
 8001b7c:	435d      	muls	r5, r3
 8001b7e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001b82:	4335      	orrs	r5, r6
 8001b84:	6125      	str	r5, [r4, #16]
 8001b86:	e7d6      	b.n	8001b36 <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001b88:	2a01      	cmp	r2, #1
 8001b8a:	d1ae      	bne.n	8001aea <USB_EPStartXfer+0xe2>
 8001b8c:	e759      	b.n	8001a42 <USB_EPStartXfer+0x3a>
 8001b8e:	bf00      	nop
 8001b90:	1ff80000 	.word	0x1ff80000

08001b94 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001b94:	784b      	ldrb	r3, [r1, #1]
 8001b96:	2b01      	cmp	r3, #1
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	780b      	ldrb	r3, [r1, #0]
 8001b9c:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001b9e:	d143      	bne.n	8001c28 <USB_EP0StartXfer+0x94>
 8001ba0:	2420      	movs	r4, #32
 8001ba2:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001ba6:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001baa:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001bac:	b9cd      	cbnz	r5, 8001be2 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001bae:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001bb2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001bb6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001bb8:	691c      	ldr	r4, [r3, #16]
 8001bba:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001bbe:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001bc0:	691c      	ldr	r4, [r3, #16]
 8001bc2:	0ce4      	lsrs	r4, r4, #19
 8001bc4:	04e4      	lsls	r4, r4, #19
 8001bc6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001bc8:	780d      	ldrb	r5, [r1, #0]
 8001bca:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001bce:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001bd0:	681c      	ldr	r4, [r3, #0]
 8001bd2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001bd6:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001bd8:	d11b      	bne.n	8001c12 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001bda:	690a      	ldr	r2, [r1, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001bde:	2000      	movs	r0, #0
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001be2:	0ce4      	lsrs	r4, r4, #19
 8001be4:	04e4      	lsls	r4, r4, #19
 8001be6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001be8:	691c      	ldr	r4, [r3, #16]
 8001bea:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001bee:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001bf2:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001bf4:	688c      	ldr	r4, [r1, #8]
 8001bf6:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001bf8:	bf88      	it	hi
 8001bfa:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001bfc:	691c      	ldr	r4, [r3, #16]
 8001bfe:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001c02:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001c04:	694c      	ldr	r4, [r1, #20]
 8001c06:	691d      	ldr	r5, [r3, #16]
 8001c08:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001c0c:	432c      	orrs	r4, r5
 8001c0e:	611c      	str	r4, [r3, #16]
 8001c10:	e7da      	b.n	8001bc8 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001c12:	694b      	ldr	r3, [r1, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0e2      	beq.n	8001bde <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001c18:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	40ab      	lsls	r3, r5
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001c26:	e7da      	b.n	8001bde <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001c28:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001c2c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001c30:	6903      	ldr	r3, [r0, #16]
 8001c32:	0cdb      	lsrs	r3, r3, #19
 8001c34:	04db      	lsls	r3, r3, #19
 8001c36:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001c38:	6903      	ldr	r3, [r0, #16]
 8001c3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001c3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001c42:	6103      	str	r3, [r0, #16]
 8001c44:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001c46:	b105      	cbz	r5, 8001c4a <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001c48:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001c4a:	6904      	ldr	r4, [r0, #16]
 8001c4c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001c50:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001c52:	6904      	ldr	r4, [r0, #16]
 8001c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c58:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001c5a:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001c5c:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001c5e:	bf04      	itt	eq
 8001c60:	68cb      	ldreq	r3, [r1, #12]
 8001c62:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001c64:	6803      	ldr	r3, [r0, #0]
 8001c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001c6a:	6003      	str	r3, [r0, #0]
 8001c6c:	e7b7      	b.n	8001bde <USB_EP0StartXfer+0x4a>

08001c6e <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001c6e:	b510      	push	{r4, lr}
 8001c70:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001c74:	b94c      	cbnz	r4, 8001c8a <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001c76:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001c78:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001c7c:	f023 0303 	bic.w	r3, r3, #3
 8001c80:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001c84:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001c86:	4299      	cmp	r1, r3
 8001c88:	d101      	bne.n	8001c8e <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001c8e:	f851 0b04 	ldr.w	r0, [r1], #4
 8001c92:	6010      	str	r0, [r2, #0]
 8001c94:	e7f7      	b.n	8001c86 <USB_WritePacket+0x18>

08001c96 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001c96:	3203      	adds	r2, #3
 8001c98:	f022 0203 	bic.w	r2, r2, #3
 8001c9c:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001c9e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001ca2:	4291      	cmp	r1, r2
 8001ca4:	d101      	bne.n	8001caa <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001caa:	6803      	ldr	r3, [r0, #0]
 8001cac:	f841 3b04 	str.w	r3, [r1], #4
 8001cb0:	e7f7      	b.n	8001ca2 <USB_ReadPacket+0xc>

08001cb2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001cb2:	784b      	ldrb	r3, [r1, #1]
 8001cb4:	780a      	ldrb	r2, [r1, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f04f 0320 	mov.w	r3, #32
 8001cbc:	d10b      	bne.n	8001cd6 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001cbe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001cc2:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0b      	blt.n	8001ce4 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cd2:	6003      	str	r3, [r0, #0]
 8001cd4:	e006      	b.n	8001ce4 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001cd6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001cda:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	daf3      	bge.n	8001ccc <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001ce4:	6803      	ldr	r3, [r0, #0]
 8001ce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cea:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001cec:	2000      	movs	r0, #0
 8001cee:	4770      	bx	lr

08001cf0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001cf0:	784b      	ldrb	r3, [r1, #1]
 8001cf2:	780a      	ldrb	r2, [r1, #0]
 8001cf4:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cf6:	bf0c      	ite	eq
 8001cf8:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cfc:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001d00:	2320      	movs	r3, #32
 8001d02:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d0c:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001d0e:	78cb      	ldrb	r3, [r1, #3]
 8001d10:	3b02      	subs	r3, #2
 8001d12:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001d14:	bf9e      	ittt	ls
 8001d16:	6803      	ldrls	r3, [r0, #0]
 8001d18:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001d1e:	2000      	movs	r0, #0
 8001d20:	4770      	bx	lr

08001d22 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001d22:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001d26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d2a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001d2e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001d32:	0109      	lsls	r1, r1, #4
 8001d34:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001d38:	4319      	orrs	r1, r3
 8001d3a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001d3e:	2000      	movs	r0, #0
 8001d40:	4770      	bx	lr

08001d42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001d42:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001d44:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001d48:	f023 0302 	bic.w	r3, r3, #2
 8001d4c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7fe fc65 	bl	8000620 <HAL_Delay>
  
  return HAL_OK;  
}
 8001d56:	2000      	movs	r0, #0
 8001d58:	bd08      	pop	{r3, pc}

08001d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001d5a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001d5c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f7fe fc59 	bl	8000620 <HAL_Delay>
  
  return HAL_OK;  
}
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd08      	pop	{r3, pc}

08001d72 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001d72:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001d74:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001d76:	4010      	ands	r0, r2
 8001d78:	4770      	bx	lr

08001d7a <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001d7a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001d7e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001d82:	69c0      	ldr	r0, [r0, #28]
 8001d84:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001d86:	0c00      	lsrs	r0, r0, #16
 8001d88:	4770      	bx	lr

08001d8a <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001d8a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001d8e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001d92:	69c0      	ldr	r0, [r0, #28]
 8001d94:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001d96:	b280      	uxth	r0, r0
 8001d98:	4770      	bx	lr

08001d9a <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001d9a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001d9e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001da2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001da6:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001da8:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001daa:	4010      	ands	r0, r2
 8001dac:	4770      	bx	lr

08001dae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001dae:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001db0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001db4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001db8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001dbc:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001dbe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001dc2:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001dc4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4323      	orrs	r3, r4
  return v;
}
 8001dca:	4018      	ands	r0, r3
 8001dcc:	bd10      	pop	{r4, pc}

08001dce <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001dce:	6940      	ldr	r0, [r0, #20]
}
 8001dd0:	f000 0001 	and.w	r0, r0, #1
 8001dd4:	4770      	bx	lr

08001dd6 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001dd6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001dda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dde:	f023 0307 	bic.w	r3, r3, #7
 8001de2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001de6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	f002 0206 	and.w	r2, r2, #6
 8001df0:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8001df2:	bf02      	ittt	eq
 8001df4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8001df8:	f042 0203 	orreq.w	r2, r2, #3
 8001dfc:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e06:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8001e08:	2000      	movs	r0, #0
 8001e0a:	4770      	bx	lr

08001e0c <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8001e0c:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001e0e:	2400      	movs	r4, #0
 8001e10:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001e14:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001e18:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001e1c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001e20:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001e24:	f044 0418 	orr.w	r4, r4, #24
 8001e28:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001e2c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8001e30:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001e32:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001e36:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001e3a:	bf08      	it	eq
 8001e3c:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001e40:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001e44:	bf04      	itt	eq
 8001e46:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001e4a:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8001e4e:	2000      	movs	r0, #0
 8001e50:	bd10      	pop	{r4, pc}
	...

08001e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001e56:	3b01      	subs	r3, #1
 8001e58:	d101      	bne.n	8001e5e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001e5e:	6902      	ldr	r2, [r0, #16]
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	daf8      	bge.n	8001e56 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001e64:	6903      	ldr	r3, [r0, #16]
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <USB_CoreReset+0x2c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	d0f3      	beq.n	8001e5a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001e72:	6903      	ldr	r3, [r0, #16]
 8001e74:	f013 0301 	ands.w	r3, r3, #1
 8001e78:	d1f9      	bne.n	8001e6e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8001e7a:	4618      	mov	r0, r3
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	00030d41 	.word	0x00030d41

08001e84 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e84:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001e88:	b11b      	cbz	r3, 8001e92 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001e90:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001e92:	2002      	movs	r0, #2
  }
}
 8001e94:	4770      	bx	lr

08001e96 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001e96:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8001e9a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e9c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001ea0:	b15b      	cbz	r3, 8001eba <USBD_CDC_EP0_RxReady+0x24>
 8001ea2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001ea6:	28ff      	cmp	r0, #255	; 0xff
 8001ea8:	d007      	beq.n	8001eba <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001eb4:	23ff      	movs	r3, #255	; 0xff
 8001eb6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001eba:	2000      	movs	r0, #0
 8001ebc:	bd10      	pop	{r4, pc}
	...

08001ec0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001ec0:	2343      	movs	r3, #67	; 0x43
 8001ec2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001ec4:	4800      	ldr	r0, [pc, #0]	; (8001ec8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001ec6:	4770      	bx	lr
 8001ec8:	20000040 	.word	0x20000040

08001ecc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001ecc:	2343      	movs	r3, #67	; 0x43
 8001ece:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001ed0:	4800      	ldr	r0, [pc, #0]	; (8001ed4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001ed2:	4770      	bx	lr
 8001ed4:	20000084 	.word	0x20000084

08001ed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001ed8:	2343      	movs	r3, #67	; 0x43
 8001eda:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001edc:	4800      	ldr	r0, [pc, #0]	; (8001ee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001ede:	4770      	bx	lr
 8001ee0:	200000d4 	.word	0x200000d4

08001ee4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001ee8:	4800      	ldr	r0, [pc, #0]	; (8001eec <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001eea:	4770      	bx	lr
 8001eec:	200000c8 	.word	0x200000c8

08001ef0 <USBD_CDC_DataOut>:
{      
 8001ef0:	b538      	push	{r3, r4, r5, lr}
 8001ef2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001ef4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001ef8:	f000 ff44 	bl	8002d84 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8001efc:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001f00:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8001f04:	b14b      	cbz	r3, 8001f1a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001f06:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001f0a:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001f14:	4798      	blx	r3
    return USBD_OK;
 8001f16:	2000      	movs	r0, #0
 8001f18:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001f1a:	2002      	movs	r0, #2
}
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001f20 <USBD_CDC_Setup>:
{
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f22:	780f      	ldrb	r7, [r1, #0]
 8001f24:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8001f28:	4606      	mov	r6, r0
 8001f2a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f2c:	d023      	beq.n	8001f76 <USBD_CDC_Setup+0x56>
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d119      	bne.n	8001f66 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8001f32:	88ca      	ldrh	r2, [r1, #6]
 8001f34:	784b      	ldrb	r3, [r1, #1]
 8001f36:	b1c2      	cbz	r2, 8001f6a <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8001f38:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f3a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8001f3e:	d50b      	bpl.n	8001f58 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f40:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001f44:	4618      	mov	r0, r3
 8001f46:	688f      	ldr	r7, [r1, #8]
 8001f48:	4629      	mov	r1, r5
 8001f4a:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8001f4c:	88e2      	ldrh	r2, [r4, #6]
 8001f4e:	4629      	mov	r1, r5
 8001f50:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8001f52:	f000 fb9a 	bl	800268a <USBD_CtlSendData>
      break;
 8001f56:	e006      	b.n	8001f66 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8001f58:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001f5c:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8001f60:	4629      	mov	r1, r5
 8001f62:	f000 fba7 	bl	80026b4 <USBD_CtlPrepareRx>
}
 8001f66:	2000      	movs	r0, #0
 8001f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f6a:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8001f6e:	6884      	ldr	r4, [r0, #8]
 8001f70:	4618      	mov	r0, r3
 8001f72:	47a0      	blx	r4
 8001f74:	e7f7      	b.n	8001f66 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8001f76:	784b      	ldrb	r3, [r1, #1]
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d1f4      	bne.n	8001f66 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4901      	ldr	r1, [pc, #4]	; (8001f84 <USBD_CDC_Setup+0x64>)
 8001f80:	e7e7      	b.n	8001f52 <USBD_CDC_Setup+0x32>
 8001f82:	bf00      	nop
 8001f84:	200001e0 	.word	0x200001e0

08001f88 <USBD_CDC_DeInit>:
{
 8001f88:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8001f8a:	2181      	movs	r1, #129	; 0x81
{
 8001f8c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001f8e:	f000 fe91 	bl	8002cb4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001f92:	2101      	movs	r1, #1
 8001f94:	4620      	mov	r0, r4
 8001f96:	f000 fe8d 	bl	8002cb4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001f9a:	2182      	movs	r1, #130	; 0x82
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f000 fe89 	bl	8002cb4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001fa2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001fa6:	b153      	cbz	r3, 8001fbe <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001fa8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001fb0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001fb4:	f000 ff94 	bl	8002ee0 <free>
    pdev->pClassData = NULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	bd10      	pop	{r4, pc}

08001fc2 <USBD_CDC_Init>:
{
 8001fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fc4:	7c03      	ldrb	r3, [r0, #16]
{
 8001fc6:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fc8:	bb7b      	cbnz	r3, 800202a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8001fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fce:	2202      	movs	r2, #2
 8001fd0:	2181      	movs	r1, #129	; 0x81
 8001fd2:	f000 fe5f 	bl	8002c94 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8001fda:	2202      	movs	r2, #2
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f000 fe58 	bl	8002c94 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	2182      	movs	r1, #130	; 0x82
 8001fea:	4620      	mov	r0, r4
 8001fec:	f000 fe52 	bl	8002c94 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001ff0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001ff4:	f000 ff6c 	bl	8002ed0 <malloc>
 8001ff8:	4606      	mov	r6, r0
 8001ffa:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001ffe:	b320      	cbz	r0, 800204a <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002000:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002008:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800200a:	2500      	movs	r5, #0
 800200c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002010:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002014:	b987      	cbnz	r7, 8002038 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800201e:	2101      	movs	r1, #1
 8002020:	4620      	mov	r0, r4
 8002022:	f000 fea1 	bl	8002d68 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002026:	4638      	mov	r0, r7
 8002028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	2202      	movs	r2, #2
 800202e:	2181      	movs	r1, #129	; 0x81
 8002030:	f000 fe30 	bl	8002c94 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002034:	2340      	movs	r3, #64	; 0x40
 8002036:	e7d0      	b.n	8001fda <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002038:	2340      	movs	r3, #64	; 0x40
 800203a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800203e:	2101      	movs	r1, #1
 8002040:	4620      	mov	r0, r4
 8002042:	f000 fe91 	bl	8002d68 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002046:	4628      	mov	r0, r5
 8002048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800204a:	2001      	movs	r0, #1
}
 800204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800204e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800204e:	b119      	cbz	r1, 8002058 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002050:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002054:	2000      	movs	r0, #0
 8002056:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002058:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800205a:	4770      	bx	lr

0800205c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800205c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002060:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002062:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002066:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800206a:	4770      	bx	lr

0800206c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800206c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002070:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002072:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002076:	4770      	bx	lr

08002078 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002078:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800207c:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800207e:	b172      	cbz	r2, 800209e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002080:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002084:	2301      	movs	r3, #1
 8002086:	b964      	cbnz	r4, 80020a2 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002088:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800208c:	2181      	movs	r1, #129	; 0x81
 800208e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002092:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002096:	f000 fe59 	bl	8002d4c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800209e:	2002      	movs	r0, #2
 80020a0:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 80020a2:	4618      	mov	r0, r3
  }
}
 80020a4:	bd10      	pop	{r4, pc}

080020a6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80020a6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80020aa:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80020ac:	b162      	cbz	r2, 80020c8 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80020ae:	7c04      	ldrb	r4, [r0, #16]
 80020b0:	b944      	cbnz	r4, 80020c4 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80020b2:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80020b6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80020ba:	2101      	movs	r1, #1
 80020bc:	f000 fe54 	bl	8002d68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80020c0:	2000      	movs	r0, #0
 80020c2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	e7f6      	b.n	80020b6 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80020c8:	2002      	movs	r0, #2
  }
}
 80020ca:	bd10      	pop	{r4, pc}

080020cc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80020cc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80020ce:	b180      	cbz	r0, 80020f2 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80020d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020d4:	b113      	cbz	r3, 80020dc <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80020dc:	b109      	cbz	r1, 80020e2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80020de:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80020e8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80020ea:	f000 fd91 	bl	8002c10 <USBD_LL_Init>
  
  return USBD_OK; 
 80020ee:	2000      	movs	r0, #0
 80020f0:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80020f2:	2002      	movs	r0, #2
}
 80020f4:	bd08      	pop	{r3, pc}

080020f6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80020f6:	b119      	cbz	r1, 8002100 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80020f8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80020fc:	2000      	movs	r0, #0
 80020fe:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002100:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002102:	4770      	bx	lr

08002104 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002104:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002106:	f000 fdb7 	bl	8002c78 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800210a:	2000      	movs	r0, #0
 800210c:	bd08      	pop	{r3, pc}

0800210e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800210e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002110:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002114:	b90b      	cbnz	r3, 800211a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002116:	2002      	movs	r0, #2
 8002118:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4798      	blx	r3
 800211e:	2800      	cmp	r0, #0
 8002120:	d1f9      	bne.n	8002116 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002122:	bd08      	pop	{r3, pc}

08002124 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002124:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002126:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4798      	blx	r3
  return USBD_OK;
}
 800212e:	2000      	movs	r0, #0
 8002130:	bd08      	pop	{r3, pc}

08002132 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002132:	b538      	push	{r3, r4, r5, lr}
 8002134:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002136:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800213a:	4628      	mov	r0, r5
 800213c:	f000 fa75 	bl	800262a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002140:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002142:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002146:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800214a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800214e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002152:	f001 031f 	and.w	r3, r1, #31
 8002156:	2b01      	cmp	r3, #1
 8002158:	d00e      	beq.n	8002178 <USBD_LL_SetupStage+0x46>
 800215a:	d307      	bcc.n	800216c <USBD_LL_SetupStage+0x3a>
 800215c:	2b02      	cmp	r3, #2
 800215e:	d010      	beq.n	8002182 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002160:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002164:	4620      	mov	r0, r4
 8002166:	f000 fdb3 	bl	8002cd0 <USBD_LL_StallEP>
    break;
 800216a:	e003      	b.n	8002174 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800216c:	4629      	mov	r1, r5
 800216e:	4620      	mov	r0, r4
 8002170:	f000 f8e6 	bl	8002340 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002174:	2000      	movs	r0, #0
 8002176:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002178:	4629      	mov	r1, r5
 800217a:	4620      	mov	r0, r4
 800217c:	f000 f9da 	bl	8002534 <USBD_StdItfReq>
    break;
 8002180:	e7f8      	b.n	8002174 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002182:	4629      	mov	r1, r5
 8002184:	4620      	mov	r0, r4
 8002186:	f000 f9ed 	bl	8002564 <USBD_StdEPReq>
    break;
 800218a:	e7f3      	b.n	8002174 <USBD_LL_SetupStage+0x42>

0800218c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	4604      	mov	r4, r0
 8002190:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002192:	bb11      	cbnz	r1, 80021da <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002194:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002198:	2b03      	cmp	r3, #3
 800219a:	d10f      	bne.n	80021bc <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800219c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80021a0:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d90b      	bls.n	80021c0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80021a8:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80021aa:	429a      	cmp	r2, r3
 80021ac:	bf28      	it	cs
 80021ae:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80021b0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80021b4:	b292      	uxth	r2, r2
 80021b6:	4629      	mov	r1, r5
 80021b8:	f000 fa8b 	bl	80026d2 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80021bc:	2000      	movs	r0, #0
 80021be:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80021c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	b123      	cbz	r3, 80021d2 <USBD_LL_DataOutStage+0x46>
 80021c8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021cc:	2a03      	cmp	r2, #3
 80021ce:	d100      	bne.n	80021d2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80021d0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f000 fa85 	bl	80026e2 <USBD_CtlSendStatus>
 80021d8:	e7f0      	b.n	80021bc <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80021da:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0eb      	beq.n	80021bc <USBD_LL_DataOutStage+0x30>
 80021e4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021e8:	2a03      	cmp	r2, #3
 80021ea:	d1e7      	bne.n	80021bc <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80021ec:	4798      	blx	r3
 80021ee:	e7e5      	b.n	80021bc <USBD_LL_DataOutStage+0x30>

080021f0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4613      	mov	r3, r2
 80021f4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80021f6:	460e      	mov	r6, r1
 80021f8:	2900      	cmp	r1, #0
 80021fa:	d13d      	bne.n	8002278 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80021fc:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002200:	2a02      	cmp	r2, #2
 8002202:	d10f      	bne.n	8002224 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002204:	69c5      	ldr	r5, [r0, #28]
 8002206:	6a02      	ldr	r2, [r0, #32]
 8002208:	4295      	cmp	r5, r2
 800220a:	d914      	bls.n	8002236 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800220c:	1aaa      	subs	r2, r5, r2
 800220e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002210:	4619      	mov	r1, r3
 8002212:	b292      	uxth	r2, r2
 8002214:	f000 fa46 	bl	80026a4 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002218:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800221a:	461a      	mov	r2, r3
 800221c:	4619      	mov	r1, r3
 800221e:	4620      	mov	r0, r4
 8002220:	f000 fda2 	bl	8002d68 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002224:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002232:	2000      	movs	r0, #0
 8002234:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002236:	6983      	ldr	r3, [r0, #24]
 8002238:	fbb3 f5f2 	udiv	r5, r3, r2
 800223c:	fb02 3515 	mls	r5, r2, r5, r3
 8002240:	b965      	cbnz	r5, 800225c <USBD_LL_DataInStage+0x6c>
 8002242:	429a      	cmp	r2, r3
 8002244:	d80a      	bhi.n	800225c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002246:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800224a:	4293      	cmp	r3, r2
 800224c:	d206      	bcs.n	800225c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800224e:	462a      	mov	r2, r5
 8002250:	f000 fa28 	bl	80026a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002254:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002258:	462b      	mov	r3, r5
 800225a:	e7de      	b.n	800221a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800225c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	b12b      	cbz	r3, 8002270 <USBD_LL_DataInStage+0x80>
 8002264:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002268:	2a03      	cmp	r2, #3
 800226a:	d101      	bne.n	8002270 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800226c:	4620      	mov	r0, r4
 800226e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002270:	4620      	mov	r0, r4
 8002272:	f000 fa41 	bl	80026f8 <USBD_CtlReceiveStatus>
 8002276:	e7d5      	b.n	8002224 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002278:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0d7      	beq.n	8002232 <USBD_LL_DataInStage+0x42>
 8002282:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002286:	2a03      	cmp	r2, #3
 8002288:	d1d3      	bne.n	8002232 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800228a:	4798      	blx	r3
 800228c:	e7d1      	b.n	8002232 <USBD_LL_DataInStage+0x42>

0800228e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800228e:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002290:	2200      	movs	r2, #0
{
 8002292:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002294:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002296:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002298:	2340      	movs	r3, #64	; 0x40
 800229a:	f000 fcfb 	bl	8002c94 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800229e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80022a0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	4620      	mov	r0, r4
 80022aa:	f000 fcf3 	bl	8002c94 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80022b4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80022b8:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80022ba:	b12b      	cbz	r3, 80022c8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80022bc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80022c0:	7921      	ldrb	r1, [r4, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4620      	mov	r0, r4
 80022c6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80022c8:	2000      	movs	r0, #0
 80022ca:	bd38      	pop	{r3, r4, r5, pc}

080022cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80022cc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80022ce:	2000      	movs	r0, #0
 80022d0:	4770      	bx	lr

080022d2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80022d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80022d6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80022da:	2304      	movs	r3, #4
 80022dc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80022e0:	2000      	movs	r0, #0
 80022e2:	4770      	bx	lr

080022e4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80022e4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80022e8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80022ec:	2000      	movs	r0, #0
 80022ee:	4770      	bx	lr

080022f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80022f0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80022f2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80022f6:	2a03      	cmp	r2, #3
 80022f8:	d104      	bne.n	8002304 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80022fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	b103      	cbz	r3, 8002304 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002302:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002304:	2000      	movs	r0, #0
 8002306:	bd08      	pop	{r3, pc}

08002308 <USBD_LL_IsoINIncomplete>:
 8002308:	2000      	movs	r0, #0
 800230a:	4770      	bx	lr

0800230c <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800230c:	2000      	movs	r0, #0
 800230e:	4770      	bx	lr

08002310 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8002310:	2000      	movs	r0, #0
 8002312:	4770      	bx	lr

08002314 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002314:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002316:	2201      	movs	r2, #1
 8002318:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800231c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8002320:	7901      	ldrb	r1, [r0, #4]
 8002322:	6852      	ldr	r2, [r2, #4]
 8002324:	4790      	blx	r2
   
  return USBD_OK;
}
 8002326:	2000      	movs	r0, #0
 8002328:	bd08      	pop	{r3, pc}

0800232a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800232a:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800232c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800232e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002330:	f000 fcce 	bl	8002cd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002334:	4620      	mov	r0, r4
 8002336:	2100      	movs	r1, #0
}
 8002338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800233c:	f000 bcc8 	b.w	8002cd0 <USBD_LL_StallEP>

08002340 <USBD_StdDevReq>:
{
 8002340:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002342:	784b      	ldrb	r3, [r1, #1]
{
 8002344:	4604      	mov	r4, r0
 8002346:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002348:	2b09      	cmp	r3, #9
 800234a:	d879      	bhi.n	8002440 <USBD_StdDevReq+0x100>
 800234c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002350:	00e500c9 	.word	0x00e500c9
 8002354:	00d90078 	.word	0x00d90078
 8002358:	006d0078 	.word	0x006d0078
 800235c:	0078000a 	.word	0x0078000a
 8002360:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002364:	884b      	ldrh	r3, [r1, #2]
 8002366:	0a1a      	lsrs	r2, r3, #8
 8002368:	3a01      	subs	r2, #1
 800236a:	2a06      	cmp	r2, #6
 800236c:	d868      	bhi.n	8002440 <USBD_StdDevReq+0x100>
 800236e:	e8df f002 	tbb	[pc, r2]
 8002372:	1c04      	.short	0x1c04
 8002374:	49676729 	.word	0x49676729
 8002378:	52          	.byte	0x52
 8002379:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800237a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800237e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002380:	7c20      	ldrb	r0, [r4, #16]
 8002382:	f10d 0106 	add.w	r1, sp, #6
 8002386:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002388:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800238c:	2a00      	cmp	r2, #0
 800238e:	d067      	beq.n	8002460 <USBD_StdDevReq+0x120>
 8002390:	88eb      	ldrh	r3, [r5, #6]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d064      	beq.n	8002460 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002396:	429a      	cmp	r2, r3
 8002398:	bf28      	it	cs
 800239a:	461a      	movcs	r2, r3
 800239c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80023a0:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80023a2:	4620      	mov	r0, r4
 80023a4:	f000 f971 	bl	800268a <USBD_CtlSendData>
 80023a8:	e05a      	b.n	8002460 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80023aa:	7c02      	ldrb	r2, [r0, #16]
 80023ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023b0:	b932      	cbnz	r2, 80023c0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80023b4:	f10d 0006 	add.w	r0, sp, #6
 80023b8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80023ba:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80023bc:	7043      	strb	r3, [r0, #1]
 80023be:	e7e3      	b.n	8002388 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	e7f7      	b.n	80023b4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d83a      	bhi.n	8002440 <USBD_StdDevReq+0x100>
 80023ca:	e8df f003 	tbb	[pc, r3]
 80023ce:	0703      	.short	0x0703
 80023d0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80023d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	e7d1      	b.n	8002380 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80023dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	e7cd      	b.n	8002380 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80023e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	e7c9      	b.n	8002380 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80023ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	e7c5      	b.n	8002380 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80023f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	e7c1      	b.n	8002380 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80023fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	e7bd      	b.n	8002380 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002404:	7c03      	ldrb	r3, [r0, #16]
 8002406:	b9db      	cbnz	r3, 8002440 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002408:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800240c:	f10d 0006 	add.w	r0, sp, #6
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	4798      	blx	r3
 8002414:	e7b8      	b.n	8002388 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002416:	7c03      	ldrb	r3, [r0, #16]
 8002418:	b993      	cbnz	r3, 8002440 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800241a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800241e:	f10d 0006 	add.w	r0, sp, #6
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002426:	2307      	movs	r3, #7
 8002428:	e7c8      	b.n	80023bc <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800242a:	888b      	ldrh	r3, [r1, #4]
 800242c:	b943      	cbnz	r3, 8002440 <USBD_StdDevReq+0x100>
 800242e:	88cb      	ldrh	r3, [r1, #6]
 8002430:	b933      	cbnz	r3, 8002440 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002432:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002436:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002438:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800243a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800243e:	d103      	bne.n	8002448 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff ff72 	bl	800232a <USBD_CtlError.constprop.0>
    break;
 8002446:	e00b      	b.n	8002460 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002448:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800244c:	4629      	mov	r1, r5
 800244e:	f000 fc6f 	bl	8002d30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002452:	4620      	mov	r0, r4
 8002454:	f000 f945 	bl	80026e2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002458:	b12d      	cbz	r5, 8002466 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800245a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800245c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002460:	2000      	movs	r0, #0
 8002462:	b003      	add	sp, #12
 8002464:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002466:	2301      	movs	r3, #1
 8002468:	e7f8      	b.n	800245c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800246a:	7889      	ldrb	r1, [r1, #2]
 800246c:	4d30      	ldr	r5, [pc, #192]	; (8002530 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800246e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002470:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002472:	d8e5      	bhi.n	8002440 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002474:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002478:	2b02      	cmp	r3, #2
 800247a:	d00c      	beq.n	8002496 <USBD_StdDevReq+0x156>
 800247c:	2b03      	cmp	r3, #3
 800247e:	d1df      	bne.n	8002440 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002480:	b9b1      	cbnz	r1, 80024b0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002482:	2302      	movs	r3, #2
 8002484:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002488:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800248a:	f7ff fe4b 	bl	8002124 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800248e:	4620      	mov	r0, r4
 8002490:	f000 f927 	bl	80026e2 <USBD_CtlSendStatus>
 8002494:	e7e4      	b.n	8002460 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002496:	2900      	cmp	r1, #0
 8002498:	d0f9      	beq.n	800248e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800249a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800249c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800249e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80024a0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fe32 	bl	800210e <USBD_SetClassConfig>
 80024aa:	2802      	cmp	r0, #2
 80024ac:	d1ef      	bne.n	800248e <USBD_StdDevReq+0x14e>
 80024ae:	e7c7      	b.n	8002440 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80024b0:	6841      	ldr	r1, [r0, #4]
 80024b2:	2901      	cmp	r1, #1
 80024b4:	d0eb      	beq.n	800248e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80024b6:	b2c9      	uxtb	r1, r1
 80024b8:	f7ff fe34 	bl	8002124 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80024bc:	7829      	ldrb	r1, [r5, #0]
 80024be:	6061      	str	r1, [r4, #4]
 80024c0:	e7f0      	b.n	80024a4 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80024c2:	88ca      	ldrh	r2, [r1, #6]
 80024c4:	2a01      	cmp	r2, #1
 80024c6:	d1bb      	bne.n	8002440 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80024c8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d003      	beq.n	80024d8 <USBD_StdDevReq+0x198>
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d1b5      	bne.n	8002440 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80024d4:	1d01      	adds	r1, r0, #4
 80024d6:	e764      	b.n	80023a2 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80024d8:	4601      	mov	r1, r0
 80024da:	2300      	movs	r3, #0
 80024dc:	f841 3f08 	str.w	r3, [r1, #8]!
 80024e0:	e75f      	b.n	80023a2 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80024e2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024e6:	3b02      	subs	r3, #2
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d8a9      	bhi.n	8002440 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80024ec:	2301      	movs	r3, #1
 80024ee:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80024f0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80024f4:	b10b      	cbz	r3, 80024fa <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80024f6:	2303      	movs	r3, #3
 80024f8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80024fa:	2202      	movs	r2, #2
 80024fc:	f104 010c 	add.w	r1, r4, #12
 8002500:	e74f      	b.n	80023a2 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002502:	884b      	ldrh	r3, [r1, #2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d1ab      	bne.n	8002460 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002508:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800250c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002510:	4629      	mov	r1, r5
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4620      	mov	r0, r4
 8002516:	4798      	blx	r3
 8002518:	e7b9      	b.n	800248e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800251a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800251e:	3b02      	subs	r3, #2
 8002520:	2b01      	cmp	r3, #1
 8002522:	d88d      	bhi.n	8002440 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002524:	884b      	ldrh	r3, [r1, #2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d19a      	bne.n	8002460 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800252a:	2300      	movs	r3, #0
 800252c:	e7ec      	b.n	8002508 <USBD_StdDevReq+0x1c8>
 800252e:	bf00      	nop
 8002530:	200001e1 	.word	0x200001e1

08002534 <USBD_StdItfReq>:
{
 8002534:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002536:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800253a:	2b03      	cmp	r3, #3
{
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002540:	d10d      	bne.n	800255e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002542:	790b      	ldrb	r3, [r1, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d80a      	bhi.n	800255e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002548:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002550:	88eb      	ldrh	r3, [r5, #6]
 8002552:	b913      	cbnz	r3, 800255a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002554:	4620      	mov	r0, r4
 8002556:	f000 f8c4 	bl	80026e2 <USBD_CtlSendStatus>
}
 800255a:	2000      	movs	r0, #0
 800255c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800255e:	f7ff fee4 	bl	800232a <USBD_CtlError.constprop.0>
    break;
 8002562:	e7fa      	b.n	800255a <USBD_StdItfReq+0x26>

08002564 <USBD_StdEPReq>:
{
 8002564:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002566:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002568:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800256a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800256e:	2a20      	cmp	r2, #32
{
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002574:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002576:	d105      	bne.n	8002584 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002578:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4798      	blx	r3
}
 8002580:	2000      	movs	r0, #0
 8002582:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002584:	784a      	ldrb	r2, [r1, #1]
 8002586:	2a01      	cmp	r2, #1
 8002588:	d01c      	beq.n	80025c4 <USBD_StdEPReq+0x60>
 800258a:	d32a      	bcc.n	80025e2 <USBD_StdEPReq+0x7e>
 800258c:	2a03      	cmp	r2, #3
 800258e:	d1f7      	bne.n	8002580 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002590:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002594:	2a02      	cmp	r2, #2
 8002596:	d040      	beq.n	800261a <USBD_StdEPReq+0xb6>
 8002598:	2a03      	cmp	r2, #3
 800259a:	d002      	beq.n	80025a2 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800259c:	f7ff fec5 	bl	800232a <USBD_CtlError.constprop.0>
      break;
 80025a0:	e7ee      	b.n	8002580 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80025a2:	884a      	ldrh	r2, [r1, #2]
 80025a4:	b922      	cbnz	r2, 80025b0 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80025a6:	065e      	lsls	r6, r3, #25
 80025a8:	d002      	beq.n	80025b0 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80025aa:	4619      	mov	r1, r3
 80025ac:	f000 fb90 	bl	8002cd0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80025b0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80025b4:	4629      	mov	r1, r5
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4620      	mov	r0, r4
 80025ba:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80025bc:	4620      	mov	r0, r4
 80025be:	f000 f890 	bl	80026e2 <USBD_CtlSendStatus>
 80025c2:	e7dd      	b.n	8002580 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80025c4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	d026      	beq.n	800261a <USBD_StdEPReq+0xb6>
 80025cc:	2a03      	cmp	r2, #3
 80025ce:	d1e5      	bne.n	800259c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80025d0:	884a      	ldrh	r2, [r1, #2]
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d1d4      	bne.n	8002580 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80025d6:	0659      	lsls	r1, r3, #25
 80025d8:	d0f0      	beq.n	80025bc <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80025da:	4619      	mov	r1, r3
 80025dc:	f000 fb86 	bl	8002cec <USBD_LL_ClearStallEP>
 80025e0:	e7e6      	b.n	80025b0 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80025e2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025e6:	2a02      	cmp	r2, #2
 80025e8:	d017      	beq.n	800261a <USBD_StdEPReq+0xb6>
 80025ea:	2a03      	cmp	r2, #3
 80025ec:	d1d6      	bne.n	800259c <USBD_StdEPReq+0x38>
 80025ee:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80025f2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80025f6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80025fa:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80025fc:	bf14      	ite	ne
 80025fe:	3514      	addne	r5, #20
 8002600:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002604:	f000 fb80 	bl	8002d08 <USBD_LL_IsStallEP>
 8002608:	b168      	cbz	r0, 8002626 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800260a:	2301      	movs	r3, #1
 800260c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800260e:	2202      	movs	r2, #2
 8002610:	4629      	mov	r1, r5
 8002612:	4620      	mov	r0, r4
 8002614:	f000 f839 	bl	800268a <USBD_CtlSendData>
      break;
 8002618:	e7b2      	b.n	8002580 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800261a:	065a      	lsls	r2, r3, #25
 800261c:	d0b0      	beq.n	8002580 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800261e:	4619      	mov	r1, r3
 8002620:	f000 fb56 	bl	8002cd0 <USBD_LL_StallEP>
 8002624:	e7ac      	b.n	8002580 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002626:	6028      	str	r0, [r5, #0]
 8002628:	e7f1      	b.n	800260e <USBD_StdEPReq+0xaa>

0800262a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800262a:	780b      	ldrb	r3, [r1, #0]
 800262c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800262e:	784b      	ldrb	r3, [r1, #1]
 8002630:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002632:	78ca      	ldrb	r2, [r1, #3]
 8002634:	788b      	ldrb	r3, [r1, #2]
 8002636:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800263a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800263c:	794a      	ldrb	r2, [r1, #5]
 800263e:	790b      	ldrb	r3, [r1, #4]
 8002640:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002644:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002646:	79ca      	ldrb	r2, [r1, #7]
 8002648:	798b      	ldrb	r3, [r1, #6]
 800264a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800264e:	80c3      	strh	r3, [r0, #6]
 8002650:	4770      	bx	lr

08002652 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002652:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002654:	b188      	cbz	r0, 800267a <USBD_GetString+0x28>
 8002656:	4605      	mov	r5, r0
 8002658:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800265a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2c00      	cmp	r4, #0
 8002662:	d1f9      	bne.n	8002658 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	3302      	adds	r3, #2
 8002668:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800266a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800266c:	2303      	movs	r3, #3
 800266e:	704b      	strb	r3, [r1, #1]
 8002670:	3801      	subs	r0, #1
 8002672:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002674:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002678:	b905      	cbnz	r5, 800267c <USBD_GetString+0x2a>
 800267a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002682:	3302      	adds	r3, #2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	548c      	strb	r4, [r1, r2]
 8002688:	e7f4      	b.n	8002674 <USBD_GetString+0x22>

0800268a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800268a:	b510      	push	{r4, lr}
 800268c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800268e:	2202      	movs	r2, #2
 8002690:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002694:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002696:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002698:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800269a:	2100      	movs	r1, #0
 800269c:	f000 fb56 	bl	8002d4c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80026a0:	2000      	movs	r0, #0
 80026a2:	bd10      	pop	{r4, pc}

080026a4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80026a4:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80026a6:	4613      	mov	r3, r2
 80026a8:	460a      	mov	r2, r1
 80026aa:	2100      	movs	r1, #0
 80026ac:	f000 fb4e 	bl	8002d4c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80026b0:	2000      	movs	r0, #0
 80026b2:	bd08      	pop	{r3, pc}

080026b4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80026b8:	2203      	movs	r2, #3
 80026ba:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80026be:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80026c2:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80026c4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80026c8:	2100      	movs	r1, #0
 80026ca:	f000 fb4d 	bl	8002d68 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80026ce:	2000      	movs	r0, #0
 80026d0:	bd10      	pop	{r4, pc}

080026d2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80026d2:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80026d4:	4613      	mov	r3, r2
 80026d6:	460a      	mov	r2, r1
 80026d8:	2100      	movs	r1, #0
 80026da:	f000 fb45 	bl	8002d68 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80026de:	2000      	movs	r0, #0
 80026e0:	bd08      	pop	{r3, pc}

080026e2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80026e2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80026e4:	2304      	movs	r3, #4
 80026e6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80026ea:	2300      	movs	r3, #0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	f000 fb2c 	bl	8002d4c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80026f4:	2000      	movs	r0, #0
 80026f6:	bd08      	pop	{r3, pc}

080026f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80026f8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80026fa:	2305      	movs	r3, #5
 80026fc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002700:	2300      	movs	r3, #0
 8002702:	461a      	mov	r2, r3
 8002704:	4619      	mov	r1, r3
 8002706:	f000 fb2f 	bl	8002d68 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800270a:	2000      	movs	r0, #0
 800270c:	bd08      	pop	{r3, pc}
	...

08002710 <ledsOn>:

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void ledsOn()
{
 8002710:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_SET);
 8002712:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <ledsOn+0x38>)
 8002714:	2201      	movs	r2, #1
 8002716:	4620      	mov	r0, r4
 8002718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800271c:	f7fe f8f4 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_SET);
 8002720:	4620      	mov	r0, r4
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002728:	f7fe f8ee 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_SET);
 800272c:	4620      	mov	r0, r4
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002734:	f7fe f8e8 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_SET);
 8002738:	4620      	mov	r0, r4
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
 8002740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_SET);
 8002744:	f7fe b8e0 	b.w	8000908 <HAL_GPIO_WritePin>
 8002748:	40020c00 	.word	0x40020c00

0800274c <ledsOff>:

void ledsOff()
{
 800274c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <ledsOff+0x38>)
 8002750:	2200      	movs	r2, #0
 8002752:	4620      	mov	r0, r4
 8002754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002758:	f7fe f8d6 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, GPIO_PIN_RESET);
 800275c:	4620      	mov	r0, r4
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002764:	f7fe f8d0 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_RESET);
 8002768:	4620      	mov	r0, r4
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002770:	f7fe f8ca 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_RESET);
 8002774:	4620      	mov	r0, r4
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
 800277c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(OrangeLED_GPIO_Port, OrangeLED_Pin, GPIO_PIN_RESET);
 8002780:	f7fe b8c2 	b.w	8000908 <HAL_GPIO_WritePin>
 8002784:	40020c00 	.word	0x40020c00

08002788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002788:	b530      	push	{r4, r5, lr}
 800278a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	2100      	movs	r1, #0
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <SystemClock_Config+0xa4>)
 8002790:	9101      	str	r1, [sp, #4]
 8002792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <SystemClock_Config+0xa8>)
 80027a6:	9102      	str	r1, [sp, #8]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027ba:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027bc:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027be:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c0:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80027c6:	2210      	movs	r2, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80027ca:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80027cc:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ce:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d0:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027d2:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 72;
 80027d4:	2148      	movs	r1, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 72;
 80027d8:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80027da:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027dc:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027de:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027e0:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80027e2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e4:	f7fe fce8 	bl	80011b8 <HAL_RCC_OscConfig>
 80027e8:	4601      	mov	r1, r0
 80027ea:	b100      	cbz	r0, 80027ee <SystemClock_Config+0x66>
 80027ec:	e7fe      	b.n	80027ec <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ee:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027f0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027f4:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f6:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027fa:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027fc:	f7fe fe8c 	bl	8001518 <HAL_RCC_ClockConfig>
 8002800:	4604      	mov	r4, r0
 8002802:	b100      	cbz	r0, 8002806 <SystemClock_Config+0x7e>
 8002804:	e7fe      	b.n	8002804 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002806:	f7fe ff21 	bl	800164c <HAL_RCC_GetHCLKFreq>
 800280a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002812:	f7fd ff6b 	bl	80006ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002816:	4628      	mov	r0, r5
 8002818:	f7fd ff7e 	bl	8000718 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800281c:	4622      	mov	r2, r4
 800281e:	4621      	mov	r1, r4
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7fd ff22 	bl	800066c <HAL_NVIC_SetPriority>
}
 8002828:	b015      	add	sp, #84	; 0x54
 800282a:	bd30      	pop	{r4, r5, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000

08002834 <main>:
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002838:	2400      	movs	r4, #0
  HAL_Init();
 800283a:	f7fd fec5 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 800283e:	f7ff ffa3 	bl	8002788 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <main+0xf0>)
 8002844:	9400      	str	r4, [sp, #0]
 8002846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 8002848:	4837      	ldr	r0, [pc, #220]	; (8002928 <main+0xf4>)
   if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 800284a:	4f38      	ldr	r7, [pc, #224]	; (800292c <main+0xf8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800284c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002858:	9200      	str	r2, [sp, #0]
 800285a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	9401      	str	r4, [sp, #4]
 800285e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	f002 0201 	and.w	r2, r2, #1
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002870:	9402      	str	r4, [sp, #8]
 8002872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002874:	f042 0208 	orr.w	r2, r2, #8
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 8002880:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002882:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 8002884:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002888:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800288a:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 800288c:	f7fe f83c 	bl	8000908 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002890:	a903      	add	r1, sp, #12
 8002892:	4826      	ldr	r0, [pc, #152]	; (800292c <main+0xf8>)
  GPIO_InitStruct.Pin = Button_Pin;
 8002894:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002896:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800289a:	f7fd ff4f 	bl	800073c <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLED_Pin OrangeLED_Pin RedLED_Pin BlueLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin;
 800289e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a2:	a903      	add	r1, sp, #12
 80028a4:	4820      	ldr	r0, [pc, #128]	; (8002928 <main+0xf4>)
  GPIO_InitStruct.Pin = GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin;
 80028a6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ae:	f7fd ff45 	bl	800073c <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 80028b2:	f000 f8b7 	bl	8002a24 <MX_USB_DEVICE_Init>
		   MessageLength = sprintf(DataToSend, "Message No. %d\n\r", MessageCounter);
 80028b6:	4c1e      	ldr	r4, [pc, #120]	; (8002930 <main+0xfc>)
 80028b8:	4d1e      	ldr	r5, [pc, #120]	; (8002934 <main+0x100>)
		   ++MessageCounter;
 80028ba:	4e1f      	ldr	r6, [pc, #124]	; (8002938 <main+0x104>)
		   MessageLength = sprintf(DataToSend, "Message No. %d\n\r", MessageCounter);
 80028bc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002948 <main+0x114>
   if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 80028c0:	481a      	ldr	r0, [pc, #104]	; (800292c <main+0xf8>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	f7fe f81a 	bl	80008fc <HAL_GPIO_ReadPin>
 80028c8:	2801      	cmp	r0, #1
 80028ca:	4681      	mov	r9, r0
 80028cc:	d117      	bne.n	80028fe <main+0xca>
	   HAL_Delay(100);
 80028ce:	2064      	movs	r0, #100	; 0x64
 80028d0:	f7fd fea6 	bl	8000620 <HAL_Delay>
	   if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 80028d4:	4649      	mov	r1, r9
 80028d6:	4638      	mov	r0, r7
 80028d8:	f7fe f810 	bl	80008fc <HAL_GPIO_ReadPin>
 80028dc:	2801      	cmp	r0, #1
 80028de:	d10e      	bne.n	80028fe <main+0xca>
		   ledsOn();
 80028e0:	f7ff ff16 	bl	8002710 <ledsOn>
		   ++MessageCounter;
 80028e4:	7832      	ldrb	r2, [r6, #0]
 80028e6:	3201      	adds	r2, #1
 80028e8:	b2d2      	uxtb	r2, r2
		   MessageLength = sprintf(DataToSend, "Message No. %d\n\r", MessageCounter);
 80028ea:	4641      	mov	r1, r8
 80028ec:	4620      	mov	r0, r4
		   ++MessageCounter;
 80028ee:	7032      	strb	r2, [r6, #0]
		   MessageLength = sprintf(DataToSend, "Message No. %d\n\r", MessageCounter);
 80028f0:	f000 fbba 	bl	8003068 <siprintf>
 80028f4:	b2c1      	uxtb	r1, r0
		   CDC_Transmit_FS(DataToSend, MessageLength);
 80028f6:	4620      	mov	r0, r4
		   MessageLength = sprintf(DataToSend, "Message No. %d\n\r", MessageCounter);
 80028f8:	7029      	strb	r1, [r5, #0]
		   CDC_Transmit_FS(DataToSend, MessageLength);
 80028fa:	f000 f8e9 	bl	8002ad0 <CDC_Transmit_FS>
   if(ReceivedDataFlag == 1){
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <main+0x108>)
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	2a01      	cmp	r2, #1
 8002904:	d1dc      	bne.n	80028c0 <main+0x8c>
      ReceivedDataFlag = 0;
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
      ledsOff();
 800290a:	f7ff ff1f 	bl	800274c <ledsOff>
      MessageLength = sprintf(DataToSend, "Received: %s\n\r", ReceivedData);
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <main+0x10c>)
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <main+0x110>)
 8002912:	4620      	mov	r0, r4
 8002914:	f000 fba8 	bl	8003068 <siprintf>
 8002918:	b2c1      	uxtb	r1, r0
      CDC_Transmit_FS(DataToSend, MessageLength);
 800291a:	4620      	mov	r0, r4
      MessageLength = sprintf(DataToSend, "Received: %s\n\r", ReceivedData);
 800291c:	7029      	strb	r1, [r5, #0]
      CDC_Transmit_FS(DataToSend, MessageLength);
 800291e:	f000 f8d7 	bl	8002ad0 <CDC_Transmit_FS>
 8002922:	e7ca      	b.n	80028ba <main+0x86>
 8002924:	40023800 	.word	0x40023800
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40020000 	.word	0x40020000
 8002930:	200001f8 	.word	0x200001f8
 8002934:	200001e3 	.word	0x200001e3
 8002938:	200001e2 	.word	0x200001e2
 800293c:	200001e4 	.word	0x200001e4
 8002940:	20000220 	.word	0x20000220
 8002944:	08003795 	.word	0x08003795
 8002948:	08003784 	.word	0x08003784

0800294c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800294c:	e7fe      	b.n	800294c <_Error_Handler>

0800294e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800294e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f7fd fe79 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	4611      	mov	r1, r2
 800295a:	f06f 000b 	mvn.w	r0, #11
 800295e:	f7fd fe85 	bl	800066c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	4611      	mov	r1, r2
 8002966:	f06f 000a 	mvn.w	r0, #10
 800296a:	f7fd fe7f 	bl	800066c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	4611      	mov	r1, r2
 8002972:	f06f 0009 	mvn.w	r0, #9
 8002976:	f7fd fe79 	bl	800066c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	4611      	mov	r1, r2
 800297e:	f06f 0004 	mvn.w	r0, #4
 8002982:	f7fd fe73 	bl	800066c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	4611      	mov	r1, r2
 800298a:	f06f 0003 	mvn.w	r0, #3
 800298e:	f7fd fe6d 	bl	800066c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	4611      	mov	r1, r2
 8002996:	f06f 0001 	mvn.w	r0, #1
 800299a:	f7fd fe67 	bl	800066c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	4611      	mov	r1, r2
 80029a2:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029aa:	f7fd be5f 	b.w	800066c <HAL_NVIC_SetPriority>

080029ae <NMI_Handler>:
 80029ae:	4770      	bx	lr

080029b0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029b0:	e7fe      	b.n	80029b0 <HardFault_Handler>

080029b2 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80029b2:	e7fe      	b.n	80029b2 <MemManage_Handler>

080029b4 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80029b4:	e7fe      	b.n	80029b4 <BusFault_Handler>

080029b6 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80029b6:	e7fe      	b.n	80029b6 <UsageFault_Handler>

080029b8 <SVC_Handler>:
 80029b8:	4770      	bx	lr

080029ba <DebugMon_Handler>:
 80029ba:	4770      	bx	lr

080029bc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80029be:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c0:	f7fd fe1c 	bl	80005fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80029c8:	f7fd beb3 	b.w	8000732 <HAL_SYSTICK_IRQHandler>

080029cc <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <OTG_FS_IRQHandler+0x8>)
 80029ce:	f7fe b821 	b.w	8000a14 <HAL_PCD_IRQHandler>
 80029d2:	bf00      	nop
 80029d4:	2000146c 	.word	0x2000146c

080029d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d8:	490f      	ldr	r1, [pc, #60]	; (8002a18 <SystemInit+0x40>)
 80029da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <SystemInit+0x44>)
 80029e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029ea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <SystemInit+0x48>)
 8002a02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a0c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a12:	608b      	str	r3, [r1, #8]
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000ed00 	.word	0xe000ed00
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	24003010 	.word	0x24003010

08002a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002a24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002a26:	4c09      	ldr	r4, [pc, #36]	; (8002a4c <MX_USB_DEVICE_Init+0x28>)
 8002a28:	4909      	ldr	r1, [pc, #36]	; (8002a50 <MX_USB_DEVICE_Init+0x2c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff fb4d 	bl	80020cc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <MX_USB_DEVICE_Init+0x30>)
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff fb5e 	bl	80020f6 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	4906      	ldr	r1, [pc, #24]	; (8002a58 <MX_USB_DEVICE_Init+0x34>)
 8002a3e:	f7ff fb06 	bl	800204e <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002a42:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002a48:	f7ff bb5c 	b.w	8002104 <USBD_Start>
 8002a4c:	20000248 	.word	0x20000248
 8002a50:	2000012c 	.word	0x2000012c
 8002a54:	20000008 	.word	0x20000008
 8002a58:	2000011c 	.word	0x2000011c

08002a5c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	4770      	bx	lr

08002a60 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002a60:	2000      	movs	r0, #0
 8002a62:	4770      	bx	lr

08002a64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4604      	mov	r4, r0
 8002a68:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <CDC_Receive_FS+0x38>)
 8002a6e:	f7ff fafd 	bl	800206c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002a72:	480a      	ldr	r0, [pc, #40]	; (8002a9c <CDC_Receive_FS+0x38>)
 8002a74:	f7ff fb17 	bl	80020a6 <USBD_CDC_ReceivePacket>
 8002a78:	2300      	movs	r3, #0
    extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

    // Wyczyszczenie tablicy odebranych danych
    uint8_t iter;
    for(iter = 0; iter<40; ++iter){
     ReceivedData[iter] = 0;
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <CDC_Receive_FS+0x3c>)
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	5499      	strb	r1, [r3, r2]
 8002a80:	3301      	adds	r3, #1
    for(iter = 0; iter<40; ++iter){
 8002a82:	2b28      	cmp	r3, #40	; 0x28
 8002a84:	d1fb      	bne.n	8002a7e <CDC_Receive_FS+0x1a>
    }

    strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8002a86:	682a      	ldr	r2, [r5, #0]
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <CDC_Receive_FS+0x3c>)
 8002a8a:	3201      	adds	r2, #1
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	f000 fb0f 	bl	80030b0 <strlcpy>
    ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <CDC_Receive_FS+0x40>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]


  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002a98:	2000      	movs	r0, #0
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000248 	.word	0x20000248
 8002aa0:	20000220 	.word	0x20000220
 8002aa4:	200001e4 	.word	0x200001e4

08002aa8 <CDC_Init_FS>:
{
 8002aa8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002aaa:	4c06      	ldr	r4, [pc, #24]	; (8002ac4 <CDC_Init_FS+0x1c>)
 8002aac:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <CDC_Init_FS+0x20>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff fad3 	bl	800205c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002ab6:	4905      	ldr	r1, [pc, #20]	; (8002acc <CDC_Init_FS+0x24>)
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff fad7 	bl	800206c <USBD_CDC_SetRxBuffer>
}
 8002abe:	2000      	movs	r0, #0
 8002ac0:	bd10      	pop	{r4, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000248 	.word	0x20000248
 8002ac8:	20000c6c 	.word	0x20000c6c
 8002acc:	2000046c 	.word	0x2000046c

08002ad0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002ad0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002ad2:	4c09      	ldr	r4, [pc, #36]	; (8002af8 <CDC_Transmit_FS+0x28>)
 8002ad4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8002ad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8002adc:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8002ade:	b943      	cbnz	r3, 8002af2 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff faba 	bl	800205c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002ae8:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8002aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002aee:	f7ff bac3 	b.w	8002078 <USBD_CDC_TransmitPacket>
}
 8002af2:	2001      	movs	r0, #1
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	bf00      	nop
 8002af8:	20000248 	.word	0x20000248

08002afc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002afc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8002afe:	6803      	ldr	r3, [r0, #0]
 8002b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002b04:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8002b06:	d125      	bne.n	8002b54 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b0c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b12:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b1a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	480e      	ldr	r0, [pc, #56]	; (8002b58 <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f7fd fe0b 	bl	800073c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_PCD_MspInit+0x60>)
 8002b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b30:	9400      	str	r4, [sp, #0]
 8002b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b40:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b42:	2043      	movs	r0, #67	; 0x43
 8002b44:	4622      	mov	r2, r4
 8002b46:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b48:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b4a:	f7fd fd8f 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002b4e:	2043      	movs	r0, #67	; 0x43
 8002b50:	f7fd fdc0 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002b54:	b006      	add	sp, #24
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002b60:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8002b64:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b68:	f7ff bae3 	b.w	8002132 <USBD_LL_SetupStage>

08002b6c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002b6c:	231c      	movs	r3, #28
 8002b6e:	fb03 0301 	mla	r3, r3, r1, r0
 8002b72:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b7a:	f7ff bb07 	b.w	800218c <USBD_LL_DataOutStage>

08002b7e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002b7e:	231c      	movs	r3, #28
 8002b80:	fb03 0301 	mla	r3, r3, r1, r0
 8002b84:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8a:	f7ff bb31 	b.w	80021f0 <USBD_LL_DataInStage>

08002b8e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002b8e:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b92:	f7ff bbad 	b.w	80022f0 <USBD_LL_SOF>

08002b96 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002b96:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8002b98:	68c1      	ldr	r1, [r0, #12]
{ 
 8002b9a:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002b9c:	3100      	adds	r1, #0
 8002b9e:	bf18      	it	ne
 8002ba0:	2101      	movne	r1, #1
 8002ba2:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002ba6:	f7ff fb91 	bl	80022cc <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002baa:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8002bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002bb2:	f7ff bb6c 	b.w	800228e <USBD_LL_Reset>
	...

08002bb8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002bbc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002bc0:	f7ff fb87 	bl	80022d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002bd2:	6a23      	ldr	r3, [r4, #32]
 8002bd4:	b123      	cbz	r3, 8002be0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002bd6:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <HAL_PCD_SuspendCallback+0x2c>)
 8002bd8:	6913      	ldr	r3, [r2, #16]
 8002bda:	f043 0306 	orr.w	r3, r3, #6
 8002bde:	6113      	str	r3, [r2, #16]
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002be8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002bec:	f7ff bb7a 	b.w	80022e4 <USBD_LL_Resume>

08002bf0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002bf0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002bf4:	f7ff bb8a 	b.w	800230c <USBD_LL_IsoOUTIncomplete>

08002bf8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002bf8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002bfc:	f7ff bb84 	b.w	8002308 <USBD_LL_IsoINIncomplete>

08002c00 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8002c00:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002c04:	f7ff bb84 	b.w	8002310 <USBD_LL_DevConnected>

08002c08 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8002c08:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002c0c:	f7ff bb82 	b.w	8002314 <USBD_LL_DevDisconnected>

08002c10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002c10:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8002c12:	7802      	ldrb	r2, [r0, #0]
 8002c14:	bb52      	cbnz	r2, 8002c6c <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c18:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8002c1a:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8002c1e:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c22:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c26:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c2a:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c2c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c2e:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002c32:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c34:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c40:	f7fd fe67 	bl	8000912 <HAL_PCD_Init>
 8002c44:	b120      	cbz	r0, 8002c50 <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c46:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002c4a:	480a      	ldr	r0, [pc, #40]	; (8002c74 <USBD_LL_Init+0x64>)
 8002c4c:	f7ff fe7e 	bl	800294c <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	4807      	ldr	r0, [pc, #28]	; (8002c70 <USBD_LL_Init+0x60>)
 8002c54:	f7fe faab 	bl	80011ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002c58:	2240      	movs	r2, #64	; 0x40
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4804      	ldr	r0, [pc, #16]	; (8002c70 <USBD_LL_Init+0x60>)
 8002c5e:	f7fe fa85 	bl	800116c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	2101      	movs	r1, #1
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <USBD_LL_Init+0x60>)
 8002c68:	f7fe fa80 	bl	800116c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	bd08      	pop	{r3, pc}
 8002c70:	2000146c 	.word	0x2000146c
 8002c74:	080037b8 	.word	0x080037b8

08002c78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002c78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002c7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c7e:	f7fd feb4 	bl	80009ea <HAL_PCD_Start>
 8002c82:	2803      	cmp	r0, #3
 8002c84:	bf9a      	itte	ls
 8002c86:	4b02      	ldrls	r3, [pc, #8]	; (8002c90 <USBD_LL_Start+0x18>)
 8002c88:	5c18      	ldrbls	r0, [r3, r0]
 8002c8a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002c8c:	bd08      	pop	{r3, pc}
 8002c8e:	bf00      	nop
 8002c90:	080037b4 	.word	0x080037b4

08002c94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002c94:	b510      	push	{r4, lr}
 8002c96:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002c98:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	f7fe f976 	bl	8000f90 <HAL_PCD_EP_Open>
 8002ca4:	2803      	cmp	r0, #3
 8002ca6:	bf9a      	itte	ls
 8002ca8:	4b01      	ldrls	r3, [pc, #4]	; (8002cb0 <USBD_LL_OpenEP+0x1c>)
 8002caa:	5c18      	ldrbls	r0, [r3, r0]
 8002cac:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002cae:	bd10      	pop	{r4, pc}
 8002cb0:	080037b4 	.word	0x080037b4

08002cb4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002cb6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cba:	f7fe f997 	bl	8000fec <HAL_PCD_EP_Close>
 8002cbe:	2803      	cmp	r0, #3
 8002cc0:	bf9a      	itte	ls
 8002cc2:	4b02      	ldrls	r3, [pc, #8]	; (8002ccc <USBD_LL_CloseEP+0x18>)
 8002cc4:	5c18      	ldrbls	r0, [r3, r0]
 8002cc6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002cc8:	bd08      	pop	{r3, pc}
 8002cca:	bf00      	nop
 8002ccc:	080037b4 	.word	0x080037b4

08002cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cd0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002cd2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cd6:	f7fe f9f8 	bl	80010ca <HAL_PCD_EP_SetStall>
 8002cda:	2803      	cmp	r0, #3
 8002cdc:	bf9a      	itte	ls
 8002cde:	4b02      	ldrls	r3, [pc, #8]	; (8002ce8 <USBD_LL_StallEP+0x18>)
 8002ce0:	5c18      	ldrbls	r0, [r3, r0]
 8002ce2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ce4:	bd08      	pop	{r3, pc}
 8002ce6:	bf00      	nop
 8002ce8:	080037b4 	.word	0x080037b4

08002cec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002cee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cf2:	f7fe fa16 	bl	8001122 <HAL_PCD_EP_ClrStall>
 8002cf6:	2803      	cmp	r0, #3
 8002cf8:	bf9a      	itte	ls
 8002cfa:	4b02      	ldrls	r3, [pc, #8]	; (8002d04 <USBD_LL_ClearStallEP+0x18>)
 8002cfc:	5c18      	ldrbls	r0, [r3, r0]
 8002cfe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002d00:	bd08      	pop	{r3, pc}
 8002d02:	bf00      	nop
 8002d04:	080037b4 	.word	0x080037b4

08002d08 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002d08:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002d0c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8002d10:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002d14:	bf1b      	ittet	ne
 8002d16:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002d1a:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002d1e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002d22:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002d26:	bf08      	it	eq
 8002d28:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8002d2c:	4770      	bx	lr
	...

08002d30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002d30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002d32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d36:	f7fe f919 	bl	8000f6c <HAL_PCD_SetAddress>
 8002d3a:	2803      	cmp	r0, #3
 8002d3c:	bf9a      	itte	ls
 8002d3e:	4b02      	ldrls	r3, [pc, #8]	; (8002d48 <USBD_LL_SetUSBAddress+0x18>)
 8002d40:	5c18      	ldrbls	r0, [r3, r0]
 8002d42:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002d44:	bd08      	pop	{r3, pc}
 8002d46:	bf00      	nop
 8002d48:	080037b4 	.word	0x080037b4

08002d4c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002d4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002d4e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d52:	f7fe f99a 	bl	800108a <HAL_PCD_EP_Transmit>
 8002d56:	2803      	cmp	r0, #3
 8002d58:	bf9a      	itte	ls
 8002d5a:	4b02      	ldrls	r3, [pc, #8]	; (8002d64 <USBD_LL_Transmit+0x18>)
 8002d5c:	5c18      	ldrbls	r0, [r3, r0]
 8002d5e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	080037b4 	.word	0x080037b4

08002d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002d68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002d6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d6e:	f7fe f960 	bl	8001032 <HAL_PCD_EP_Receive>
 8002d72:	2803      	cmp	r0, #3
 8002d74:	bf9a      	itte	ls
 8002d76:	4b02      	ldrls	r3, [pc, #8]	; (8002d80 <USBD_LL_PrepareReceive+0x18>)
 8002d78:	5c18      	ldrbls	r0, [r3, r0]
 8002d7a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002d7c:	bd08      	pop	{r3, pc}
 8002d7e:	bf00      	nop
 8002d80:	080037b4 	.word	0x080037b4

08002d84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002d84:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002d86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002d8a:	f7fe f976 	bl	800107a <HAL_PCD_EP_GetRxCount>
}
 8002d8e:	bd08      	pop	{r3, pc}

08002d90 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002d90:	2312      	movs	r3, #18
 8002d92:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8002d94:	4800      	ldr	r0, [pc, #0]	; (8002d98 <USBD_FS_DeviceDescriptor+0x8>)
 8002d96:	4770      	bx	lr
 8002d98:	20000148 	.word	0x20000148

08002d9c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002da0:	4800      	ldr	r0, [pc, #0]	; (8002da4 <USBD_FS_LangIDStrDescriptor+0x8>)
 8002da2:	4770      	bx	lr
 8002da4:	2000015c 	.word	0x2000015c

08002da8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002da8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002daa:	4c04      	ldr	r4, [pc, #16]	; (8002dbc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002dac:	4804      	ldr	r0, [pc, #16]	; (8002dc0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002dae:	460a      	mov	r2, r1
 8002db0:	4621      	mov	r1, r4
 8002db2:	f7ff fc4e 	bl	8002652 <USBD_GetString>
  return USBD_StrDesc;
}
 8002db6:	4620      	mov	r0, r4
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000185c 	.word	0x2000185c
 8002dc0:	080037e4 	.word	0x080037e4

08002dc4 <USBD_FS_ProductStrDescriptor>:
{
 8002dc4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002dc6:	4c04      	ldr	r4, [pc, #16]	; (8002dd8 <USBD_FS_ProductStrDescriptor+0x14>)
 8002dc8:	4804      	ldr	r0, [pc, #16]	; (8002ddc <USBD_FS_ProductStrDescriptor+0x18>)
 8002dca:	460a      	mov	r2, r1
 8002dcc:	4621      	mov	r1, r4
 8002dce:	f7ff fc40 	bl	8002652 <USBD_GetString>
}
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000185c 	.word	0x2000185c
 8002ddc:	080037f7 	.word	0x080037f7

08002de0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002de0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002de2:	4c04      	ldr	r4, [pc, #16]	; (8002df4 <USBD_FS_SerialStrDescriptor+0x14>)
 8002de4:	4804      	ldr	r0, [pc, #16]	; (8002df8 <USBD_FS_SerialStrDescriptor+0x18>)
 8002de6:	460a      	mov	r2, r1
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7ff fc32 	bl	8002652 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002dee:	4620      	mov	r0, r4
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	bf00      	nop
 8002df4:	2000185c 	.word	0x2000185c
 8002df8:	0800380d 	.word	0x0800380d

08002dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002dfc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002dfe:	4c04      	ldr	r4, [pc, #16]	; (8002e10 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002e02:	460a      	mov	r2, r1
 8002e04:	4621      	mov	r1, r4
 8002e06:	f7ff fc24 	bl	8002652 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	bd10      	pop	{r4, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000185c 	.word	0x2000185c
 8002e14:	080037cb 	.word	0x080037cb

08002e18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002e18:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002e1a:	4c04      	ldr	r4, [pc, #16]	; (8002e2c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002e1e:	460a      	mov	r2, r1
 8002e20:	4621      	mov	r1, r4
 8002e22:	f7ff fc16 	bl	8002652 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002e26:	4620      	mov	r0, r4
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000185c 	.word	0x2000185c
 8002e30:	080037d6 	.word	0x080037d6

08002e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e3a:	e003      	b.n	8002e44 <LoopCopyDataInit>

08002e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e42:	3104      	adds	r1, #4

08002e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e44:	480b      	ldr	r0, [pc, #44]	; (8002e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e4c:	d3f6      	bcc.n	8002e3c <CopyDataInit>
  ldr  r2, =_sbss
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e50:	e002      	b.n	8002e58 <LoopFillZerobss>

08002e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e54:	f842 3b04 	str.w	r3, [r2], #4

08002e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e5c:	d3f9      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e5e:	f7ff fdbb 	bl	80029d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e62:	f000 f811 	bl	8002e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e66:	f7ff fce5 	bl	8002834 <main>
  bx  lr    
 8002e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e70:	08003860 	.word	0x08003860
  ldr  r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e78:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8002e7c:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8002e80:	20001a60 	.word	0x20001a60

08002e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e84:	e7fe      	b.n	8002e84 <ADC_IRQHandler>
	...

08002e88 <__libc_init_array>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	4e0d      	ldr	r6, [pc, #52]	; (8002ec0 <__libc_init_array+0x38>)
 8002e8c:	4c0d      	ldr	r4, [pc, #52]	; (8002ec4 <__libc_init_array+0x3c>)
 8002e8e:	1ba4      	subs	r4, r4, r6
 8002e90:	10a4      	asrs	r4, r4, #2
 8002e92:	2500      	movs	r5, #0
 8002e94:	42a5      	cmp	r5, r4
 8002e96:	d109      	bne.n	8002eac <__libc_init_array+0x24>
 8002e98:	4e0b      	ldr	r6, [pc, #44]	; (8002ec8 <__libc_init_array+0x40>)
 8002e9a:	4c0c      	ldr	r4, [pc, #48]	; (8002ecc <__libc_init_array+0x44>)
 8002e9c:	f000 fc66 	bl	800376c <_init>
 8002ea0:	1ba4      	subs	r4, r4, r6
 8002ea2:	10a4      	asrs	r4, r4, #2
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	42a5      	cmp	r5, r4
 8002ea8:	d105      	bne.n	8002eb6 <__libc_init_array+0x2e>
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eb0:	4798      	blx	r3
 8002eb2:	3501      	adds	r5, #1
 8002eb4:	e7ee      	b.n	8002e94 <__libc_init_array+0xc>
 8002eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eba:	4798      	blx	r3
 8002ebc:	3501      	adds	r5, #1
 8002ebe:	e7f2      	b.n	8002ea6 <__libc_init_array+0x1e>
 8002ec0:	08003858 	.word	0x08003858
 8002ec4:	08003858 	.word	0x08003858
 8002ec8:	08003858 	.word	0x08003858
 8002ecc:	0800385c 	.word	0x0800385c

08002ed0 <malloc>:
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <malloc+0xc>)
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f000 b859 	b.w	8002f8c <_malloc_r>
 8002eda:	bf00      	nop
 8002edc:	20000160 	.word	0x20000160

08002ee0 <free>:
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <free+0xc>)
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	f000 b803 	b.w	8002ef0 <_free_r>
 8002eea:	bf00      	nop
 8002eec:	20000160 	.word	0x20000160

08002ef0 <_free_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4605      	mov	r5, r0
 8002ef4:	2900      	cmp	r1, #0
 8002ef6:	d045      	beq.n	8002f84 <_free_r+0x94>
 8002ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002efc:	1f0c      	subs	r4, r1, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bfb8      	it	lt
 8002f02:	18e4      	addlt	r4, r4, r3
 8002f04:	f000 f8e9 	bl	80030da <__malloc_lock>
 8002f08:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <_free_r+0x98>)
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	b933      	cbnz	r3, 8002f1e <_free_r+0x2e>
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	6014      	str	r4, [r2, #0]
 8002f14:	4628      	mov	r0, r5
 8002f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f1a:	f000 b8df 	b.w	80030dc <__malloc_unlock>
 8002f1e:	42a3      	cmp	r3, r4
 8002f20:	d90c      	bls.n	8002f3c <_free_r+0x4c>
 8002f22:	6821      	ldr	r1, [r4, #0]
 8002f24:	1862      	adds	r2, r4, r1
 8002f26:	4293      	cmp	r3, r2
 8002f28:	bf04      	itt	eq
 8002f2a:	681a      	ldreq	r2, [r3, #0]
 8002f2c:	685b      	ldreq	r3, [r3, #4]
 8002f2e:	6063      	str	r3, [r4, #4]
 8002f30:	bf04      	itt	eq
 8002f32:	1852      	addeq	r2, r2, r1
 8002f34:	6022      	streq	r2, [r4, #0]
 8002f36:	6004      	str	r4, [r0, #0]
 8002f38:	e7ec      	b.n	8002f14 <_free_r+0x24>
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	b10a      	cbz	r2, 8002f44 <_free_r+0x54>
 8002f40:	42a2      	cmp	r2, r4
 8002f42:	d9fa      	bls.n	8002f3a <_free_r+0x4a>
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	1858      	adds	r0, r3, r1
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	d10b      	bne.n	8002f64 <_free_r+0x74>
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	4401      	add	r1, r0
 8002f50:	1858      	adds	r0, r3, r1
 8002f52:	4282      	cmp	r2, r0
 8002f54:	6019      	str	r1, [r3, #0]
 8002f56:	d1dd      	bne.n	8002f14 <_free_r+0x24>
 8002f58:	6810      	ldr	r0, [r2, #0]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	4401      	add	r1, r0
 8002f60:	6019      	str	r1, [r3, #0]
 8002f62:	e7d7      	b.n	8002f14 <_free_r+0x24>
 8002f64:	d902      	bls.n	8002f6c <_free_r+0x7c>
 8002f66:	230c      	movs	r3, #12
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	e7d3      	b.n	8002f14 <_free_r+0x24>
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	1821      	adds	r1, r4, r0
 8002f70:	428a      	cmp	r2, r1
 8002f72:	bf04      	itt	eq
 8002f74:	6811      	ldreq	r1, [r2, #0]
 8002f76:	6852      	ldreq	r2, [r2, #4]
 8002f78:	6062      	str	r2, [r4, #4]
 8002f7a:	bf04      	itt	eq
 8002f7c:	1809      	addeq	r1, r1, r0
 8002f7e:	6021      	streq	r1, [r4, #0]
 8002f80:	605c      	str	r4, [r3, #4]
 8002f82:	e7c7      	b.n	8002f14 <_free_r+0x24>
 8002f84:	bd38      	pop	{r3, r4, r5, pc}
 8002f86:	bf00      	nop
 8002f88:	200001e8 	.word	0x200001e8

08002f8c <_malloc_r>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	1ccd      	adds	r5, r1, #3
 8002f90:	f025 0503 	bic.w	r5, r5, #3
 8002f94:	3508      	adds	r5, #8
 8002f96:	2d0c      	cmp	r5, #12
 8002f98:	bf38      	it	cc
 8002f9a:	250c      	movcc	r5, #12
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	4606      	mov	r6, r0
 8002fa0:	db01      	blt.n	8002fa6 <_malloc_r+0x1a>
 8002fa2:	42a9      	cmp	r1, r5
 8002fa4:	d903      	bls.n	8002fae <_malloc_r+0x22>
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	6033      	str	r3, [r6, #0]
 8002faa:	2000      	movs	r0, #0
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	f000 f894 	bl	80030da <__malloc_lock>
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <_malloc_r+0xb4>)
 8002fb4:	6814      	ldr	r4, [r2, #0]
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	b991      	cbnz	r1, 8002fe0 <_malloc_r+0x54>
 8002fba:	4c22      	ldr	r4, [pc, #136]	; (8003044 <_malloc_r+0xb8>)
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	b91b      	cbnz	r3, 8002fc8 <_malloc_r+0x3c>
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f000 f841 	bl	8003048 <_sbrk_r>
 8002fc6:	6020      	str	r0, [r4, #0]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f000 f83c 	bl	8003048 <_sbrk_r>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d126      	bne.n	8003022 <_malloc_r+0x96>
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	6033      	str	r3, [r6, #0]
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f000 f87f 	bl	80030dc <__malloc_unlock>
 8002fde:	e7e4      	b.n	8002faa <_malloc_r+0x1e>
 8002fe0:	680b      	ldr	r3, [r1, #0]
 8002fe2:	1b5b      	subs	r3, r3, r5
 8002fe4:	d41a      	bmi.n	800301c <_malloc_r+0x90>
 8002fe6:	2b0b      	cmp	r3, #11
 8002fe8:	d90f      	bls.n	800300a <_malloc_r+0x7e>
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	50cd      	str	r5, [r1, r3]
 8002fee:	18cc      	adds	r4, r1, r3
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f000 f873 	bl	80030dc <__malloc_unlock>
 8002ff6:	f104 000b 	add.w	r0, r4, #11
 8002ffa:	1d23      	adds	r3, r4, #4
 8002ffc:	f020 0007 	bic.w	r0, r0, #7
 8003000:	1ac3      	subs	r3, r0, r3
 8003002:	d01b      	beq.n	800303c <_malloc_r+0xb0>
 8003004:	425a      	negs	r2, r3
 8003006:	50e2      	str	r2, [r4, r3]
 8003008:	bd70      	pop	{r4, r5, r6, pc}
 800300a:	428c      	cmp	r4, r1
 800300c:	bf0d      	iteet	eq
 800300e:	6863      	ldreq	r3, [r4, #4]
 8003010:	684b      	ldrne	r3, [r1, #4]
 8003012:	6063      	strne	r3, [r4, #4]
 8003014:	6013      	streq	r3, [r2, #0]
 8003016:	bf18      	it	ne
 8003018:	460c      	movne	r4, r1
 800301a:	e7e9      	b.n	8002ff0 <_malloc_r+0x64>
 800301c:	460c      	mov	r4, r1
 800301e:	6849      	ldr	r1, [r1, #4]
 8003020:	e7ca      	b.n	8002fb8 <_malloc_r+0x2c>
 8003022:	1cc4      	adds	r4, r0, #3
 8003024:	f024 0403 	bic.w	r4, r4, #3
 8003028:	42a0      	cmp	r0, r4
 800302a:	d005      	beq.n	8003038 <_malloc_r+0xac>
 800302c:	1a21      	subs	r1, r4, r0
 800302e:	4630      	mov	r0, r6
 8003030:	f000 f80a 	bl	8003048 <_sbrk_r>
 8003034:	3001      	adds	r0, #1
 8003036:	d0cd      	beq.n	8002fd4 <_malloc_r+0x48>
 8003038:	6025      	str	r5, [r4, #0]
 800303a:	e7d9      	b.n	8002ff0 <_malloc_r+0x64>
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	bf00      	nop
 8003040:	200001e8 	.word	0x200001e8
 8003044:	200001ec 	.word	0x200001ec

08003048 <_sbrk_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4c06      	ldr	r4, [pc, #24]	; (8003064 <_sbrk_r+0x1c>)
 800304c:	2300      	movs	r3, #0
 800304e:	4605      	mov	r5, r0
 8003050:	4608      	mov	r0, r1
 8003052:	6023      	str	r3, [r4, #0]
 8003054:	f000 fb7c 	bl	8003750 <_sbrk>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_sbrk_r+0x1a>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	b103      	cbz	r3, 8003062 <_sbrk_r+0x1a>
 8003060:	602b      	str	r3, [r5, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20001a5c 	.word	0x20001a5c

08003068 <siprintf>:
 8003068:	b40e      	push	{r1, r2, r3}
 800306a:	b500      	push	{lr}
 800306c:	b09c      	sub	sp, #112	; 0x70
 800306e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003072:	ab1d      	add	r3, sp, #116	; 0x74
 8003074:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003078:	9002      	str	r0, [sp, #8]
 800307a:	9006      	str	r0, [sp, #24]
 800307c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003080:	480a      	ldr	r0, [pc, #40]	; (80030ac <siprintf+0x44>)
 8003082:	9104      	str	r1, [sp, #16]
 8003084:	9107      	str	r1, [sp, #28]
 8003086:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800308a:	f853 2b04 	ldr.w	r2, [r3], #4
 800308e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003092:	6800      	ldr	r0, [r0, #0]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	a902      	add	r1, sp, #8
 8003098:	f000 f87c 	bl	8003194 <_svfiprintf_r>
 800309c:	9b02      	ldr	r3, [sp, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	b01c      	add	sp, #112	; 0x70
 80030a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030a8:	b003      	add	sp, #12
 80030aa:	4770      	bx	lr
 80030ac:	20000160 	.word	0x20000160

080030b0 <strlcpy>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	460b      	mov	r3, r1
 80030b4:	b162      	cbz	r2, 80030d0 <strlcpy+0x20>
 80030b6:	3a01      	subs	r2, #1
 80030b8:	d008      	beq.n	80030cc <strlcpy+0x1c>
 80030ba:	f813 4b01 	ldrb.w	r4, [r3], #1
 80030be:	f800 4b01 	strb.w	r4, [r0], #1
 80030c2:	2c00      	cmp	r4, #0
 80030c4:	d1f7      	bne.n	80030b6 <strlcpy+0x6>
 80030c6:	1a58      	subs	r0, r3, r1
 80030c8:	3801      	subs	r0, #1
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	2200      	movs	r2, #0
 80030ce:	7002      	strb	r2, [r0, #0]
 80030d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d1fb      	bne.n	80030d0 <strlcpy+0x20>
 80030d8:	e7f5      	b.n	80030c6 <strlcpy+0x16>

080030da <__malloc_lock>:
 80030da:	4770      	bx	lr

080030dc <__malloc_unlock>:
 80030dc:	4770      	bx	lr

080030de <__ssputs_r>:
 80030de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e2:	688e      	ldr	r6, [r1, #8]
 80030e4:	429e      	cmp	r6, r3
 80030e6:	4682      	mov	sl, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	4691      	mov	r9, r2
 80030ec:	4698      	mov	r8, r3
 80030ee:	d835      	bhi.n	800315c <__ssputs_r+0x7e>
 80030f0:	898a      	ldrh	r2, [r1, #12]
 80030f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030f6:	d031      	beq.n	800315c <__ssputs_r+0x7e>
 80030f8:	6825      	ldr	r5, [r4, #0]
 80030fa:	6909      	ldr	r1, [r1, #16]
 80030fc:	1a6f      	subs	r7, r5, r1
 80030fe:	6965      	ldr	r5, [r4, #20]
 8003100:	2302      	movs	r3, #2
 8003102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003106:	fb95 f5f3 	sdiv	r5, r5, r3
 800310a:	f108 0301 	add.w	r3, r8, #1
 800310e:	443b      	add	r3, r7
 8003110:	429d      	cmp	r5, r3
 8003112:	bf38      	it	cc
 8003114:	461d      	movcc	r5, r3
 8003116:	0553      	lsls	r3, r2, #21
 8003118:	d531      	bpl.n	800317e <__ssputs_r+0xa0>
 800311a:	4629      	mov	r1, r5
 800311c:	f7ff ff36 	bl	8002f8c <_malloc_r>
 8003120:	4606      	mov	r6, r0
 8003122:	b950      	cbnz	r0, 800313a <__ssputs_r+0x5c>
 8003124:	230c      	movs	r3, #12
 8003126:	f8ca 3000 	str.w	r3, [sl]
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313a:	463a      	mov	r2, r7
 800313c:	6921      	ldr	r1, [r4, #16]
 800313e:	f000 fab3 	bl	80036a8 <memcpy>
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	81a3      	strh	r3, [r4, #12]
 800314e:	6126      	str	r6, [r4, #16]
 8003150:	6165      	str	r5, [r4, #20]
 8003152:	443e      	add	r6, r7
 8003154:	1bed      	subs	r5, r5, r7
 8003156:	6026      	str	r6, [r4, #0]
 8003158:	60a5      	str	r5, [r4, #8]
 800315a:	4646      	mov	r6, r8
 800315c:	4546      	cmp	r6, r8
 800315e:	bf28      	it	cs
 8003160:	4646      	movcs	r6, r8
 8003162:	4632      	mov	r2, r6
 8003164:	4649      	mov	r1, r9
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	f000 faa9 	bl	80036be <memmove>
 800316c:	68a3      	ldr	r3, [r4, #8]
 800316e:	1b9b      	subs	r3, r3, r6
 8003170:	60a3      	str	r3, [r4, #8]
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	441e      	add	r6, r3
 8003176:	6026      	str	r6, [r4, #0]
 8003178:	2000      	movs	r0, #0
 800317a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800317e:	462a      	mov	r2, r5
 8003180:	f000 fab7 	bl	80036f2 <_realloc_r>
 8003184:	4606      	mov	r6, r0
 8003186:	2800      	cmp	r0, #0
 8003188:	d1e1      	bne.n	800314e <__ssputs_r+0x70>
 800318a:	6921      	ldr	r1, [r4, #16]
 800318c:	4650      	mov	r0, sl
 800318e:	f7ff feaf 	bl	8002ef0 <_free_r>
 8003192:	e7c7      	b.n	8003124 <__ssputs_r+0x46>

08003194 <_svfiprintf_r>:
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	b09d      	sub	sp, #116	; 0x74
 800319a:	4680      	mov	r8, r0
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	898b      	ldrh	r3, [r1, #12]
 80031a0:	061c      	lsls	r4, r3, #24
 80031a2:	460d      	mov	r5, r1
 80031a4:	4616      	mov	r6, r2
 80031a6:	d50f      	bpl.n	80031c8 <_svfiprintf_r+0x34>
 80031a8:	690b      	ldr	r3, [r1, #16]
 80031aa:	b96b      	cbnz	r3, 80031c8 <_svfiprintf_r+0x34>
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f7ff feed 	bl	8002f8c <_malloc_r>
 80031b2:	6028      	str	r0, [r5, #0]
 80031b4:	6128      	str	r0, [r5, #16]
 80031b6:	b928      	cbnz	r0, 80031c4 <_svfiprintf_r+0x30>
 80031b8:	230c      	movs	r3, #12
 80031ba:	f8c8 3000 	str.w	r3, [r8]
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	e0c5      	b.n	8003350 <_svfiprintf_r+0x1bc>
 80031c4:	2340      	movs	r3, #64	; 0x40
 80031c6:	616b      	str	r3, [r5, #20]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9309      	str	r3, [sp, #36]	; 0x24
 80031cc:	2320      	movs	r3, #32
 80031ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031d2:	2330      	movs	r3, #48	; 0x30
 80031d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031d8:	f04f 0b01 	mov.w	fp, #1
 80031dc:	4637      	mov	r7, r6
 80031de:	463c      	mov	r4, r7
 80031e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d13c      	bne.n	8003262 <_svfiprintf_r+0xce>
 80031e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80031ec:	d00b      	beq.n	8003206 <_svfiprintf_r+0x72>
 80031ee:	4653      	mov	r3, sl
 80031f0:	4632      	mov	r2, r6
 80031f2:	4629      	mov	r1, r5
 80031f4:	4640      	mov	r0, r8
 80031f6:	f7ff ff72 	bl	80030de <__ssputs_r>
 80031fa:	3001      	adds	r0, #1
 80031fc:	f000 80a3 	beq.w	8003346 <_svfiprintf_r+0x1b2>
 8003200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003202:	4453      	add	r3, sl
 8003204:	9309      	str	r3, [sp, #36]	; 0x24
 8003206:	783b      	ldrb	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 809c 	beq.w	8003346 <_svfiprintf_r+0x1b2>
 800320e:	2300      	movs	r3, #0
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	9304      	str	r3, [sp, #16]
 8003216:	9307      	str	r3, [sp, #28]
 8003218:	9205      	str	r2, [sp, #20]
 800321a:	9306      	str	r3, [sp, #24]
 800321c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003220:	931a      	str	r3, [sp, #104]	; 0x68
 8003222:	2205      	movs	r2, #5
 8003224:	7821      	ldrb	r1, [r4, #0]
 8003226:	4850      	ldr	r0, [pc, #320]	; (8003368 <_svfiprintf_r+0x1d4>)
 8003228:	f7fc ffd2 	bl	80001d0 <memchr>
 800322c:	1c67      	adds	r7, r4, #1
 800322e:	9b04      	ldr	r3, [sp, #16]
 8003230:	b9d8      	cbnz	r0, 800326a <_svfiprintf_r+0xd6>
 8003232:	06d9      	lsls	r1, r3, #27
 8003234:	bf44      	itt	mi
 8003236:	2220      	movmi	r2, #32
 8003238:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800323c:	071a      	lsls	r2, r3, #28
 800323e:	bf44      	itt	mi
 8003240:	222b      	movmi	r2, #43	; 0x2b
 8003242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003246:	7822      	ldrb	r2, [r4, #0]
 8003248:	2a2a      	cmp	r2, #42	; 0x2a
 800324a:	d016      	beq.n	800327a <_svfiprintf_r+0xe6>
 800324c:	9a07      	ldr	r2, [sp, #28]
 800324e:	2100      	movs	r1, #0
 8003250:	200a      	movs	r0, #10
 8003252:	4627      	mov	r7, r4
 8003254:	3401      	adds	r4, #1
 8003256:	783b      	ldrb	r3, [r7, #0]
 8003258:	3b30      	subs	r3, #48	; 0x30
 800325a:	2b09      	cmp	r3, #9
 800325c:	d951      	bls.n	8003302 <_svfiprintf_r+0x16e>
 800325e:	b1c9      	cbz	r1, 8003294 <_svfiprintf_r+0x100>
 8003260:	e011      	b.n	8003286 <_svfiprintf_r+0xf2>
 8003262:	2b25      	cmp	r3, #37	; 0x25
 8003264:	d0c0      	beq.n	80031e8 <_svfiprintf_r+0x54>
 8003266:	4627      	mov	r7, r4
 8003268:	e7b9      	b.n	80031de <_svfiprintf_r+0x4a>
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <_svfiprintf_r+0x1d4>)
 800326c:	1a80      	subs	r0, r0, r2
 800326e:	fa0b f000 	lsl.w	r0, fp, r0
 8003272:	4318      	orrs	r0, r3
 8003274:	9004      	str	r0, [sp, #16]
 8003276:	463c      	mov	r4, r7
 8003278:	e7d3      	b.n	8003222 <_svfiprintf_r+0x8e>
 800327a:	9a03      	ldr	r2, [sp, #12]
 800327c:	1d11      	adds	r1, r2, #4
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	9103      	str	r1, [sp, #12]
 8003282:	2a00      	cmp	r2, #0
 8003284:	db01      	blt.n	800328a <_svfiprintf_r+0xf6>
 8003286:	9207      	str	r2, [sp, #28]
 8003288:	e004      	b.n	8003294 <_svfiprintf_r+0x100>
 800328a:	4252      	negs	r2, r2
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	9207      	str	r2, [sp, #28]
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	783b      	ldrb	r3, [r7, #0]
 8003296:	2b2e      	cmp	r3, #46	; 0x2e
 8003298:	d10e      	bne.n	80032b8 <_svfiprintf_r+0x124>
 800329a:	787b      	ldrb	r3, [r7, #1]
 800329c:	2b2a      	cmp	r3, #42	; 0x2a
 800329e:	f107 0101 	add.w	r1, r7, #1
 80032a2:	d132      	bne.n	800330a <_svfiprintf_r+0x176>
 80032a4:	9b03      	ldr	r3, [sp, #12]
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	9203      	str	r2, [sp, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bfb8      	it	lt
 80032b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80032b4:	3702      	adds	r7, #2
 80032b6:	9305      	str	r3, [sp, #20]
 80032b8:	4c2c      	ldr	r4, [pc, #176]	; (800336c <_svfiprintf_r+0x1d8>)
 80032ba:	7839      	ldrb	r1, [r7, #0]
 80032bc:	2203      	movs	r2, #3
 80032be:	4620      	mov	r0, r4
 80032c0:	f7fc ff86 	bl	80001d0 <memchr>
 80032c4:	b138      	cbz	r0, 80032d6 <_svfiprintf_r+0x142>
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	1b00      	subs	r0, r0, r4
 80032ca:	fa03 f000 	lsl.w	r0, r3, r0
 80032ce:	9b04      	ldr	r3, [sp, #16]
 80032d0:	4303      	orrs	r3, r0
 80032d2:	9304      	str	r3, [sp, #16]
 80032d4:	3701      	adds	r7, #1
 80032d6:	7839      	ldrb	r1, [r7, #0]
 80032d8:	4825      	ldr	r0, [pc, #148]	; (8003370 <_svfiprintf_r+0x1dc>)
 80032da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032de:	2206      	movs	r2, #6
 80032e0:	1c7e      	adds	r6, r7, #1
 80032e2:	f7fc ff75 	bl	80001d0 <memchr>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d035      	beq.n	8003356 <_svfiprintf_r+0x1c2>
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <_svfiprintf_r+0x1e0>)
 80032ec:	b9fb      	cbnz	r3, 800332e <_svfiprintf_r+0x19a>
 80032ee:	9b03      	ldr	r3, [sp, #12]
 80032f0:	3307      	adds	r3, #7
 80032f2:	f023 0307 	bic.w	r3, r3, #7
 80032f6:	3308      	adds	r3, #8
 80032f8:	9303      	str	r3, [sp, #12]
 80032fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032fc:	444b      	add	r3, r9
 80032fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003300:	e76c      	b.n	80031dc <_svfiprintf_r+0x48>
 8003302:	fb00 3202 	mla	r2, r0, r2, r3
 8003306:	2101      	movs	r1, #1
 8003308:	e7a3      	b.n	8003252 <_svfiprintf_r+0xbe>
 800330a:	2300      	movs	r3, #0
 800330c:	9305      	str	r3, [sp, #20]
 800330e:	4618      	mov	r0, r3
 8003310:	240a      	movs	r4, #10
 8003312:	460f      	mov	r7, r1
 8003314:	3101      	adds	r1, #1
 8003316:	783a      	ldrb	r2, [r7, #0]
 8003318:	3a30      	subs	r2, #48	; 0x30
 800331a:	2a09      	cmp	r2, #9
 800331c:	d903      	bls.n	8003326 <_svfiprintf_r+0x192>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0ca      	beq.n	80032b8 <_svfiprintf_r+0x124>
 8003322:	9005      	str	r0, [sp, #20]
 8003324:	e7c8      	b.n	80032b8 <_svfiprintf_r+0x124>
 8003326:	fb04 2000 	mla	r0, r4, r0, r2
 800332a:	2301      	movs	r3, #1
 800332c:	e7f1      	b.n	8003312 <_svfiprintf_r+0x17e>
 800332e:	ab03      	add	r3, sp, #12
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	462a      	mov	r2, r5
 8003334:	4b10      	ldr	r3, [pc, #64]	; (8003378 <_svfiprintf_r+0x1e4>)
 8003336:	a904      	add	r1, sp, #16
 8003338:	4640      	mov	r0, r8
 800333a:	f3af 8000 	nop.w
 800333e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003342:	4681      	mov	r9, r0
 8003344:	d1d9      	bne.n	80032fa <_svfiprintf_r+0x166>
 8003346:	89ab      	ldrh	r3, [r5, #12]
 8003348:	065b      	lsls	r3, r3, #25
 800334a:	f53f af38 	bmi.w	80031be <_svfiprintf_r+0x2a>
 800334e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003350:	b01d      	add	sp, #116	; 0x74
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003356:	ab03      	add	r3, sp, #12
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	462a      	mov	r2, r5
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <_svfiprintf_r+0x1e4>)
 800335e:	a904      	add	r1, sp, #16
 8003360:	4640      	mov	r0, r8
 8003362:	f000 f881 	bl	8003468 <_printf_i>
 8003366:	e7ea      	b.n	800333e <_svfiprintf_r+0x1aa>
 8003368:	0800381a 	.word	0x0800381a
 800336c:	08003820 	.word	0x08003820
 8003370:	08003824 	.word	0x08003824
 8003374:	00000000 	.word	0x00000000
 8003378:	080030df 	.word	0x080030df

0800337c <_printf_common>:
 800337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	4691      	mov	r9, r2
 8003382:	461f      	mov	r7, r3
 8003384:	688a      	ldr	r2, [r1, #8]
 8003386:	690b      	ldr	r3, [r1, #16]
 8003388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800338c:	4293      	cmp	r3, r2
 800338e:	bfb8      	it	lt
 8003390:	4613      	movlt	r3, r2
 8003392:	f8c9 3000 	str.w	r3, [r9]
 8003396:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800339a:	4606      	mov	r6, r0
 800339c:	460c      	mov	r4, r1
 800339e:	b112      	cbz	r2, 80033a6 <_printf_common+0x2a>
 80033a0:	3301      	adds	r3, #1
 80033a2:	f8c9 3000 	str.w	r3, [r9]
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	0699      	lsls	r1, r3, #26
 80033aa:	bf42      	ittt	mi
 80033ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033b0:	3302      	addmi	r3, #2
 80033b2:	f8c9 3000 	strmi.w	r3, [r9]
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	f015 0506 	ands.w	r5, r5, #6
 80033bc:	d107      	bne.n	80033ce <_printf_common+0x52>
 80033be:	f104 0a19 	add.w	sl, r4, #25
 80033c2:	68e3      	ldr	r3, [r4, #12]
 80033c4:	f8d9 2000 	ldr.w	r2, [r9]
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	429d      	cmp	r5, r3
 80033cc:	db29      	blt.n	8003422 <_printf_common+0xa6>
 80033ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	3300      	adds	r3, #0
 80033d6:	bf18      	it	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	0692      	lsls	r2, r2, #26
 80033dc:	d42e      	bmi.n	800343c <_printf_common+0xc0>
 80033de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033e2:	4639      	mov	r1, r7
 80033e4:	4630      	mov	r0, r6
 80033e6:	47c0      	blx	r8
 80033e8:	3001      	adds	r0, #1
 80033ea:	d021      	beq.n	8003430 <_printf_common+0xb4>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	68e5      	ldr	r5, [r4, #12]
 80033f0:	f8d9 2000 	ldr.w	r2, [r9]
 80033f4:	f003 0306 	and.w	r3, r3, #6
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	bf08      	it	eq
 80033fc:	1aad      	subeq	r5, r5, r2
 80033fe:	68a3      	ldr	r3, [r4, #8]
 8003400:	6922      	ldr	r2, [r4, #16]
 8003402:	bf0c      	ite	eq
 8003404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003408:	2500      	movne	r5, #0
 800340a:	4293      	cmp	r3, r2
 800340c:	bfc4      	itt	gt
 800340e:	1a9b      	subgt	r3, r3, r2
 8003410:	18ed      	addgt	r5, r5, r3
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	341a      	adds	r4, #26
 8003418:	454d      	cmp	r5, r9
 800341a:	d11b      	bne.n	8003454 <_printf_common+0xd8>
 800341c:	2000      	movs	r0, #0
 800341e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003422:	2301      	movs	r3, #1
 8003424:	4652      	mov	r2, sl
 8003426:	4639      	mov	r1, r7
 8003428:	4630      	mov	r0, r6
 800342a:	47c0      	blx	r8
 800342c:	3001      	adds	r0, #1
 800342e:	d103      	bne.n	8003438 <_printf_common+0xbc>
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003438:	3501      	adds	r5, #1
 800343a:	e7c2      	b.n	80033c2 <_printf_common+0x46>
 800343c:	18e1      	adds	r1, r4, r3
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	2030      	movs	r0, #48	; 0x30
 8003442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003446:	4422      	add	r2, r4
 8003448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800344c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003450:	3302      	adds	r3, #2
 8003452:	e7c4      	b.n	80033de <_printf_common+0x62>
 8003454:	2301      	movs	r3, #1
 8003456:	4622      	mov	r2, r4
 8003458:	4639      	mov	r1, r7
 800345a:	4630      	mov	r0, r6
 800345c:	47c0      	blx	r8
 800345e:	3001      	adds	r0, #1
 8003460:	d0e6      	beq.n	8003430 <_printf_common+0xb4>
 8003462:	f109 0901 	add.w	r9, r9, #1
 8003466:	e7d7      	b.n	8003418 <_printf_common+0x9c>

08003468 <_printf_i>:
 8003468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800346c:	4617      	mov	r7, r2
 800346e:	7e0a      	ldrb	r2, [r1, #24]
 8003470:	b085      	sub	sp, #20
 8003472:	2a6e      	cmp	r2, #110	; 0x6e
 8003474:	4698      	mov	r8, r3
 8003476:	4606      	mov	r6, r0
 8003478:	460c      	mov	r4, r1
 800347a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800347c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003480:	f000 80bc 	beq.w	80035fc <_printf_i+0x194>
 8003484:	d81a      	bhi.n	80034bc <_printf_i+0x54>
 8003486:	2a63      	cmp	r2, #99	; 0x63
 8003488:	d02e      	beq.n	80034e8 <_printf_i+0x80>
 800348a:	d80a      	bhi.n	80034a2 <_printf_i+0x3a>
 800348c:	2a00      	cmp	r2, #0
 800348e:	f000 80c8 	beq.w	8003622 <_printf_i+0x1ba>
 8003492:	2a58      	cmp	r2, #88	; 0x58
 8003494:	f000 808a 	beq.w	80035ac <_printf_i+0x144>
 8003498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800349c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80034a0:	e02a      	b.n	80034f8 <_printf_i+0x90>
 80034a2:	2a64      	cmp	r2, #100	; 0x64
 80034a4:	d001      	beq.n	80034aa <_printf_i+0x42>
 80034a6:	2a69      	cmp	r2, #105	; 0x69
 80034a8:	d1f6      	bne.n	8003498 <_printf_i+0x30>
 80034aa:	6821      	ldr	r1, [r4, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034b2:	d023      	beq.n	80034fc <_printf_i+0x94>
 80034b4:	1d11      	adds	r1, r2, #4
 80034b6:	6019      	str	r1, [r3, #0]
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	e027      	b.n	800350c <_printf_i+0xa4>
 80034bc:	2a73      	cmp	r2, #115	; 0x73
 80034be:	f000 80b4 	beq.w	800362a <_printf_i+0x1c2>
 80034c2:	d808      	bhi.n	80034d6 <_printf_i+0x6e>
 80034c4:	2a6f      	cmp	r2, #111	; 0x6f
 80034c6:	d02a      	beq.n	800351e <_printf_i+0xb6>
 80034c8:	2a70      	cmp	r2, #112	; 0x70
 80034ca:	d1e5      	bne.n	8003498 <_printf_i+0x30>
 80034cc:	680a      	ldr	r2, [r1, #0]
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	600a      	str	r2, [r1, #0]
 80034d4:	e003      	b.n	80034de <_printf_i+0x76>
 80034d6:	2a75      	cmp	r2, #117	; 0x75
 80034d8:	d021      	beq.n	800351e <_printf_i+0xb6>
 80034da:	2a78      	cmp	r2, #120	; 0x78
 80034dc:	d1dc      	bne.n	8003498 <_printf_i+0x30>
 80034de:	2278      	movs	r2, #120	; 0x78
 80034e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80034e4:	496e      	ldr	r1, [pc, #440]	; (80036a0 <_printf_i+0x238>)
 80034e6:	e064      	b.n	80035b2 <_printf_i+0x14a>
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80034ee:	1d11      	adds	r1, r2, #4
 80034f0:	6019      	str	r1, [r3, #0]
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0a3      	b.n	8003644 <_printf_i+0x1dc>
 80034fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003500:	f102 0104 	add.w	r1, r2, #4
 8003504:	6019      	str	r1, [r3, #0]
 8003506:	d0d7      	beq.n	80034b8 <_printf_i+0x50>
 8003508:	f9b2 3000 	ldrsh.w	r3, [r2]
 800350c:	2b00      	cmp	r3, #0
 800350e:	da03      	bge.n	8003518 <_printf_i+0xb0>
 8003510:	222d      	movs	r2, #45	; 0x2d
 8003512:	425b      	negs	r3, r3
 8003514:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003518:	4962      	ldr	r1, [pc, #392]	; (80036a4 <_printf_i+0x23c>)
 800351a:	220a      	movs	r2, #10
 800351c:	e017      	b.n	800354e <_printf_i+0xe6>
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003526:	d003      	beq.n	8003530 <_printf_i+0xc8>
 8003528:	1d08      	adds	r0, r1, #4
 800352a:	6018      	str	r0, [r3, #0]
 800352c:	680b      	ldr	r3, [r1, #0]
 800352e:	e006      	b.n	800353e <_printf_i+0xd6>
 8003530:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003534:	f101 0004 	add.w	r0, r1, #4
 8003538:	6018      	str	r0, [r3, #0]
 800353a:	d0f7      	beq.n	800352c <_printf_i+0xc4>
 800353c:	880b      	ldrh	r3, [r1, #0]
 800353e:	4959      	ldr	r1, [pc, #356]	; (80036a4 <_printf_i+0x23c>)
 8003540:	2a6f      	cmp	r2, #111	; 0x6f
 8003542:	bf14      	ite	ne
 8003544:	220a      	movne	r2, #10
 8003546:	2208      	moveq	r2, #8
 8003548:	2000      	movs	r0, #0
 800354a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800354e:	6865      	ldr	r5, [r4, #4]
 8003550:	60a5      	str	r5, [r4, #8]
 8003552:	2d00      	cmp	r5, #0
 8003554:	f2c0 809c 	blt.w	8003690 <_printf_i+0x228>
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	f020 0004 	bic.w	r0, r0, #4
 800355e:	6020      	str	r0, [r4, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d13f      	bne.n	80035e4 <_printf_i+0x17c>
 8003564:	2d00      	cmp	r5, #0
 8003566:	f040 8095 	bne.w	8003694 <_printf_i+0x22c>
 800356a:	4675      	mov	r5, lr
 800356c:	2a08      	cmp	r2, #8
 800356e:	d10b      	bne.n	8003588 <_printf_i+0x120>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	07da      	lsls	r2, r3, #31
 8003574:	d508      	bpl.n	8003588 <_printf_i+0x120>
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	bfde      	ittt	le
 800357e:	2330      	movle	r3, #48	; 0x30
 8003580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003584:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003588:	ebae 0305 	sub.w	r3, lr, r5
 800358c:	6123      	str	r3, [r4, #16]
 800358e:	f8cd 8000 	str.w	r8, [sp]
 8003592:	463b      	mov	r3, r7
 8003594:	aa03      	add	r2, sp, #12
 8003596:	4621      	mov	r1, r4
 8003598:	4630      	mov	r0, r6
 800359a:	f7ff feef 	bl	800337c <_printf_common>
 800359e:	3001      	adds	r0, #1
 80035a0:	d155      	bne.n	800364e <_printf_i+0x1e6>
 80035a2:	f04f 30ff 	mov.w	r0, #4294967295
 80035a6:	b005      	add	sp, #20
 80035a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80035b0:	493c      	ldr	r1, [pc, #240]	; (80036a4 <_printf_i+0x23c>)
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80035ba:	f100 0504 	add.w	r5, r0, #4
 80035be:	601d      	str	r5, [r3, #0]
 80035c0:	d001      	beq.n	80035c6 <_printf_i+0x15e>
 80035c2:	6803      	ldr	r3, [r0, #0]
 80035c4:	e002      	b.n	80035cc <_printf_i+0x164>
 80035c6:	0655      	lsls	r5, r2, #25
 80035c8:	d5fb      	bpl.n	80035c2 <_printf_i+0x15a>
 80035ca:	8803      	ldrh	r3, [r0, #0]
 80035cc:	07d0      	lsls	r0, r2, #31
 80035ce:	bf44      	itt	mi
 80035d0:	f042 0220 	orrmi.w	r2, r2, #32
 80035d4:	6022      	strmi	r2, [r4, #0]
 80035d6:	b91b      	cbnz	r3, 80035e0 <_printf_i+0x178>
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	f022 0220 	bic.w	r2, r2, #32
 80035de:	6022      	str	r2, [r4, #0]
 80035e0:	2210      	movs	r2, #16
 80035e2:	e7b1      	b.n	8003548 <_printf_i+0xe0>
 80035e4:	4675      	mov	r5, lr
 80035e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80035ea:	fb02 3310 	mls	r3, r2, r0, r3
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035f4:	4603      	mov	r3, r0
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d1f5      	bne.n	80035e6 <_printf_i+0x17e>
 80035fa:	e7b7      	b.n	800356c <_printf_i+0x104>
 80035fc:	6808      	ldr	r0, [r1, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	6949      	ldr	r1, [r1, #20]
 8003602:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003606:	d004      	beq.n	8003612 <_printf_i+0x1aa>
 8003608:	1d10      	adds	r0, r2, #4
 800360a:	6018      	str	r0, [r3, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	6019      	str	r1, [r3, #0]
 8003610:	e007      	b.n	8003622 <_printf_i+0x1ba>
 8003612:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003616:	f102 0004 	add.w	r0, r2, #4
 800361a:	6018      	str	r0, [r3, #0]
 800361c:	6813      	ldr	r3, [r2, #0]
 800361e:	d0f6      	beq.n	800360e <_printf_i+0x1a6>
 8003620:	8019      	strh	r1, [r3, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	6123      	str	r3, [r4, #16]
 8003626:	4675      	mov	r5, lr
 8003628:	e7b1      	b.n	800358e <_printf_i+0x126>
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	1d11      	adds	r1, r2, #4
 800362e:	6019      	str	r1, [r3, #0]
 8003630:	6815      	ldr	r5, [r2, #0]
 8003632:	6862      	ldr	r2, [r4, #4]
 8003634:	2100      	movs	r1, #0
 8003636:	4628      	mov	r0, r5
 8003638:	f7fc fdca 	bl	80001d0 <memchr>
 800363c:	b108      	cbz	r0, 8003642 <_printf_i+0x1da>
 800363e:	1b40      	subs	r0, r0, r5
 8003640:	6060      	str	r0, [r4, #4]
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	6123      	str	r3, [r4, #16]
 8003646:	2300      	movs	r3, #0
 8003648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800364c:	e79f      	b.n	800358e <_printf_i+0x126>
 800364e:	6923      	ldr	r3, [r4, #16]
 8003650:	462a      	mov	r2, r5
 8003652:	4639      	mov	r1, r7
 8003654:	4630      	mov	r0, r6
 8003656:	47c0      	blx	r8
 8003658:	3001      	adds	r0, #1
 800365a:	d0a2      	beq.n	80035a2 <_printf_i+0x13a>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	079b      	lsls	r3, r3, #30
 8003660:	d507      	bpl.n	8003672 <_printf_i+0x20a>
 8003662:	2500      	movs	r5, #0
 8003664:	f104 0919 	add.w	r9, r4, #25
 8003668:	68e3      	ldr	r3, [r4, #12]
 800366a:	9a03      	ldr	r2, [sp, #12]
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	429d      	cmp	r5, r3
 8003670:	db05      	blt.n	800367e <_printf_i+0x216>
 8003672:	68e0      	ldr	r0, [r4, #12]
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	4298      	cmp	r0, r3
 8003678:	bfb8      	it	lt
 800367a:	4618      	movlt	r0, r3
 800367c:	e793      	b.n	80035a6 <_printf_i+0x13e>
 800367e:	2301      	movs	r3, #1
 8003680:	464a      	mov	r2, r9
 8003682:	4639      	mov	r1, r7
 8003684:	4630      	mov	r0, r6
 8003686:	47c0      	blx	r8
 8003688:	3001      	adds	r0, #1
 800368a:	d08a      	beq.n	80035a2 <_printf_i+0x13a>
 800368c:	3501      	adds	r5, #1
 800368e:	e7eb      	b.n	8003668 <_printf_i+0x200>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1a7      	bne.n	80035e4 <_printf_i+0x17c>
 8003694:	780b      	ldrb	r3, [r1, #0]
 8003696:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800369a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800369e:	e765      	b.n	800356c <_printf_i+0x104>
 80036a0:	0800383c 	.word	0x0800383c
 80036a4:	0800382b 	.word	0x0800382b

080036a8 <memcpy>:
 80036a8:	b510      	push	{r4, lr}
 80036aa:	1e43      	subs	r3, r0, #1
 80036ac:	440a      	add	r2, r1
 80036ae:	4291      	cmp	r1, r2
 80036b0:	d100      	bne.n	80036b4 <memcpy+0xc>
 80036b2:	bd10      	pop	{r4, pc}
 80036b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036bc:	e7f7      	b.n	80036ae <memcpy+0x6>

080036be <memmove>:
 80036be:	4288      	cmp	r0, r1
 80036c0:	b510      	push	{r4, lr}
 80036c2:	eb01 0302 	add.w	r3, r1, r2
 80036c6:	d803      	bhi.n	80036d0 <memmove+0x12>
 80036c8:	1e42      	subs	r2, r0, #1
 80036ca:	4299      	cmp	r1, r3
 80036cc:	d10c      	bne.n	80036e8 <memmove+0x2a>
 80036ce:	bd10      	pop	{r4, pc}
 80036d0:	4298      	cmp	r0, r3
 80036d2:	d2f9      	bcs.n	80036c8 <memmove+0xa>
 80036d4:	1881      	adds	r1, r0, r2
 80036d6:	1ad2      	subs	r2, r2, r3
 80036d8:	42d3      	cmn	r3, r2
 80036da:	d100      	bne.n	80036de <memmove+0x20>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036e6:	e7f7      	b.n	80036d8 <memmove+0x1a>
 80036e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036f0:	e7eb      	b.n	80036ca <memmove+0xc>

080036f2 <_realloc_r>:
 80036f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f4:	4607      	mov	r7, r0
 80036f6:	4614      	mov	r4, r2
 80036f8:	460e      	mov	r6, r1
 80036fa:	b921      	cbnz	r1, 8003706 <_realloc_r+0x14>
 80036fc:	4611      	mov	r1, r2
 80036fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003702:	f7ff bc43 	b.w	8002f8c <_malloc_r>
 8003706:	b922      	cbnz	r2, 8003712 <_realloc_r+0x20>
 8003708:	f7ff fbf2 	bl	8002ef0 <_free_r>
 800370c:	4625      	mov	r5, r4
 800370e:	4628      	mov	r0, r5
 8003710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003712:	f000 f814 	bl	800373e <_malloc_usable_size_r>
 8003716:	4284      	cmp	r4, r0
 8003718:	d90f      	bls.n	800373a <_realloc_r+0x48>
 800371a:	4621      	mov	r1, r4
 800371c:	4638      	mov	r0, r7
 800371e:	f7ff fc35 	bl	8002f8c <_malloc_r>
 8003722:	4605      	mov	r5, r0
 8003724:	2800      	cmp	r0, #0
 8003726:	d0f2      	beq.n	800370e <_realloc_r+0x1c>
 8003728:	4631      	mov	r1, r6
 800372a:	4622      	mov	r2, r4
 800372c:	f7ff ffbc 	bl	80036a8 <memcpy>
 8003730:	4631      	mov	r1, r6
 8003732:	4638      	mov	r0, r7
 8003734:	f7ff fbdc 	bl	8002ef0 <_free_r>
 8003738:	e7e9      	b.n	800370e <_realloc_r+0x1c>
 800373a:	4635      	mov	r5, r6
 800373c:	e7e7      	b.n	800370e <_realloc_r+0x1c>

0800373e <_malloc_usable_size_r>:
 800373e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003742:	2800      	cmp	r0, #0
 8003744:	f1a0 0004 	sub.w	r0, r0, #4
 8003748:	bfbc      	itt	lt
 800374a:	580b      	ldrlt	r3, [r1, r0]
 800374c:	18c0      	addlt	r0, r0, r3
 800374e:	4770      	bx	lr

08003750 <_sbrk>:
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <_sbrk+0x14>)
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	4602      	mov	r2, r0
 8003756:	b909      	cbnz	r1, 800375c <_sbrk+0xc>
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <_sbrk+0x18>)
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	4402      	add	r2, r0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	4770      	bx	lr
 8003764:	200001f0 	.word	0x200001f0
 8003768:	20001a60 	.word	0x20001a60

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
